#library "mdistuff"
#include "zcommon.acs"   
#import "redrum.acs"
#import "classic.acs"
#import "mdinwdi.acs"





                  /*&&*(& @@@,                                                                                                                      
                   /@ @&@(#@%                                                                                                                        
                   @&(@*@ @,   .                                                                                    .,,,,                            
                  ./,   , .. @@@@  #@@@& .@@@ (@@@@@@@@@@@(   &@   &@@@@       .@@@ @@@@@@@@@@@@  &@@@@@@@*     .(#@@@@@@@@@@   %@@(  #@(&@@*        
                  @@@@@/  /@@@@@@  &@@@. ,@@@@   .@@@*       .@@@  @@@@.       @@@@&   &@@(.    @@@@@@@@@@@@/      /@@@   &@@(  @@&@@ @@.@@%@@       
                 %@@@@@@ (@@@@@@@ *@@@#  %@@@,   #@@@@       &@@% .@@@%       @@@@@@   @@@@.  &@@@@*  ,&/@@@@@(   ,@@@  %@@@@  %@#/@@&@%&@*,@@       
                .@@@@@@@@@@@@@@@( &@@@,  @@@@    @@@@.      ,@@@. %@@@,      @@@@@@@  *@@@@  (@@@%.*@@@@@@@@@@@   @@@@@@@@@&  ,@@%@@&@@%@@&@@(       
                &@@@&@@@@@@@@@@@ *@@@@  *@@@@   #@@@%       &@@& .@@@@      ,@@,@@@#  @@@@   @@@&  (,@@@@@@@@@@/ &@@@@@@&.    (@@&,  @@#@@&,         
                @@@@ #@@@@@(@@@, @@@@#  &@@@,   &@@@.      .@@@/ %@@@@      @@@/@@@   @@@(   @@@@,   *@@@& @@@@(,@@@ #@@%      #.,(%@@@*             
               (@@@.  (&@%/@@@@  @@@@   @@@%    @@@@       #@@@  @@@@*     @@@@@@@#  %@@@,   /@@@&      **@@@@ @@@. *@@@     /@#  %@@#,.            
              ,@@@@       @@@@# (@@@@*@@@@@    #@@@(       @@@% .@@@#     @@@. @@@, ,@@@@     @@@@@@(..*&@@@@@.@@@,  .@@@     @@  .@@*               
              &@@@&      .@@@@, &@@@@@@@@@@    @@@@       *@@@  *@@@@@@@@/@@(  @@@  &@@@%       @@@@@@@@@@@@,  @@#   .@@@    %@@  *@@                
              @@@@        %&@    @@@@@@@@@/    @@@*        ,%.  @@@@@@@@@&,    @@&  &@@@  .,,,... ,@@@@@@*....#@.     @&     @@(  @@@                
                                          /////((#(%%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       ,(                 
      / .             . *%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@%@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@&                          
    %@@@@@@@@@@@&@@@@@@@@@@@@@@@&%#%,,..,.,.#&&&@@@@%,#&@@%&@@@@@%///(///,@%/%.#%@* /  #.   .,,*./. %,%%# %@(/-@@(,/@@@&&                          
              (.(/(#((#&@@%@&&@@%/,for WhoDunIT/*/
			  
			  



                 //by Zeberpal
                                                                           

//pukename single to play sinleplayer
#libdefine SEK 35
bool mdiprologue = false;
int laughdel = 35;

//global int 11:mingame;
//global bool 12: AllowMDI;

global bool 11: MDIGlobal[];
/*
0 = AllowMDI: 0 - no, 1 = yes;
1 = rounds till next AllowMdi vote;
2 = Voted to keep MDI info: percentage
3 = Voted to keep MDI info: Voted yes
4 = Voted to keep MDI info: Voted No
5 = Voted to keep MDI info: abstained
6 = Times ppl rqed
7 = Test function off
8 = rounds till next everyone in the server vote(92);
*/
global str 12: MDIVoteDate;
				
str MutilatorType[12] = 
{
"", //[0] is Mutilator (weapon) for Murderer. Primary array.
"", //[1] is for decorative cases. Like in intro
"SND_ManiacLaugh", //[2] type of the MutilatorLaugh
"", //[3] type of the Mutilator Sound when he walks
"" , //[4] State of StunYou actor, used when 5:00 and you turn to Mutilator behind you
//////
//////  now quests stuff
//////
"", //[5]//the name img file when you have to find a place by photo
"", //[6]//top victim name
"", //[7] //minigame state name
"GH_HolySpirit", //[8] //wdi minigame ghostN1
"GH_DarkSpirit",  //[9] //wdi minigame ghostN2
"SDFINWEL" //[10] "prepare to die' sound
};



int mdigame[20] = 
{
6, ///[0] is playerCount 
70,///[1] is game tempo
0, ///[2] is additional victim points
35,///[3] Mutilator's laugh delay
255,//[4] global skybox brightness
0,////[5] ammount of Stamina to give per some time
5,/////[6] ammount of Stamina to take per some time

/////// now ever map exclusive

0,/////[7] Map Icons Counter. HAVE to be 3digits number. map1 - 100m map2 - 200, etc
0, // [8]goal 2 angle to look from the left
0, // [9]goal 2 angle to look from the right
0, // [10]final mission X
0,  // [11]final mission Y
///////////////////////////////////////////////
0,  // [12]Skip intro' variable
8,  // [13]Stun minimum time
12,  // [14]Stun maximum time
0, // [15] give tripshotguns to murd if it's 1
9101, //[16] spawnpoint of Trite in the end
120, //[17] teleport murd at the end
3400, //[18] teleport inno at the end
121  //[19] Spawn Plank at the end
};

int MDITELEPORTA = 3200;
int MDITELEPORTB = 3400;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////  MDIScoreBoard
///////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//

//int TopVictim;
//int TopVictimPTS = 0;

script "MDI_ROUND_BEST_VICTIM" (void)      //execute it when goes to final phase. It will determinate who is best victim of the current round
{
//MutilatorType[6]= strParam(n:wdimdiadd[13]+1);
for(int i = 0; i<32; i++)
{
    int MaybeTopVictim = CheckActorInventory(TID_START+i, "mdipts");
    if(MaybeTopVictim > wdimdiadd[14])
    {
        wdimdiadd[13] = TID_START+i;  //id
        wdimdiadd[14] = MaybeTopVictim;  //pts
    }
SetCvar("mdiTopVictcnt", true);
}
//MutilatorType[6]= strParam(n:wdimdiadd[13]+1);

}

Script "OkVictimRecord" (void)
{
if (GetCvar("SeasonOnHold") == false)
{
GiveActorInventory(wdimdiadd[13], "IsTopVictim", 1);
}
}

Script "VictimRecord" (void)
{
Str TopVictimName = strParam(n:0);
//
//
str LVL = "acci";
if (MUTILATOR_MOD() == 2) LVL = "movi";

STR mdi_TopVictimScore = strParam(s:LVL, s:"_TopVictim",i:wdimdiadd[1],s:"Score");
STR mdi_OLDTopVictimScore = strParam(s:LVL, s:"_TopVictim",i:wdimdiadd[0],s:"Score");
STR mdi_TopVictim = strParam(s:LVL, s:"_TopVictim",i:wdimdiadd[1]);
STR mdi_OLDTopVictim = strParam(s:LVL, s:"_TopVictim",i:wdimdiadd[0]);

     
	 if (ClassifyActor(wdimdiadd[13]) & ACTOR_ALIVE)//if (CheckActorInventory(wdimdiadd[13], "IsVictim")) //check if Victim with best pts is alive
		{
		
     if (wdimdiadd[1]<7) //+2 to avoid fuckery
	 {
	  if (GetCvar(mdi_TopVictimScore) >= wdimdiadd[14])
	   {
	     wdimdiadd[1]+=1; //Then skip to next slot, if >=condition then quit the script at once
		 restart;
	   }
	  else  //if current slot pts is less than round result
		{
	  mdi_TopVictimScore = strParam(s:LVL, s:"_TopVictim",i:wdimdiadd[0]-1,s:"Score");
	  mdi_TopVictim = strParam(s:LVL, s:"_TopVictim",i:wdimdiadd[0]-1);
       //at this moment round wdimdiadd[1] = new record slot

	    if(wdimdiadd[0]>wdimdiadd[1])   //while it is, scroll the shit down
	     {
	  SetCvar(mdi_OLDTopVictimScore,GetCvar(mdi_TopVictimScore)); 
	  SetCvarString(mdi_OLDTopVictim,GetCvarString(mdi_TopVictim));
      wdimdiadd[0]-=1;
	  restart;
	     }
	   mdi_TopVictimScore = strParam(s:LVL, s:"_TopVictim",i:wdimdiadd[1],s:"Score");
	   mdi_TopVictim = strParam(s:LVL, s:"_TopVictim",i:wdimdiadd[1]);
	   SetCvar(mdi_TopVictimScore,wdimdiadd[14]); SetCvarString(mdi_TopVictim, TopVictimName/*MutilatorType[6]*/); //then we create a new record
	   wdimdiadd[1]=7;
		}
	  }

     else if (wdimdiadd[1]>=7) {}
	 }
	 }
	 






Script "MutilatorRecord" (void)
{
Str TopMutilatorName = strParam(s:"\cc[",i:wdimdiadd[8],s:"\cc]  ",n:gameinfo[2]+1);
//
//
str LVL = "acci";
if (MUTILATOR_MOD() == 2) LVL = "movi";


STR mdi_TopMutilatorScore = strParam(s:LVL, s:"_TopMutilator",i:wdimdiadd[1],s:"Score");
STR mdi_OLDTopMutilatorScore = strParam(s:LVL, s:"_TopMutilator",i:wdimdiadd[0],s:"Score");
STR mdi_TopMutilator = strParam(s:LVL, s:"_TopMutilator",i:wdimdiadd[1]);
STR mdi_OLDTopMutilator = strParam(s:LVL, s:"_TopMutilator",i:wdimdiadd[0]);


     if (wdimdiadd[1]<7) //+2 to avoid fuckery
	 {
	  if (GetCvar(mdi_TopMutilatorScore) >= wdimdiadd[12])
	   {	
	     wdimdiadd[1]+=1; //Then skip to next slot, if >=condition then quit the script at once
		 restart;
	   }
	  else  //if current slot pts is less than round result
	  {
	  mdi_TopMutilatorScore = strParam(s:LVL, s:"_TopMutilator",i:wdimdiadd[0]-1,s:"Score");
	  mdi_TopMutilator = strParam(s:LVL, s:"_TopMutilator",i:wdimdiadd[0]-1);
       //at this moment round wdimdiadd[1] = new record slot

	    if(wdimdiadd[0]>wdimdiadd[1])   //while it is, scroll the shit down
	     {             
	  SetCvar(mdi_OLDTopMutilatorScore,GetCvar(mdi_TopMutilatorScore)); SetCvarString(mdi_OLDTopMutilator,GetCvarString(mdi_TopMutilator));
      wdimdiadd[0]-=1;
	  restart;
	     }
	   mdi_TopMutilatorScore = strParam(s:LVL, s:"_TopMutilator",i:wdimdiadd[1],s:"Score");
	   mdi_TopMutilator = strParam(s:LVL, s:"_TopMutilator",i:wdimdiadd[1]);
	   SetCvar(mdi_TopMutilatorScore, wdimdiadd[12]); SetCvarString(mdi_TopMutilator,TopMutilatorName); //then we create a new record
	   wdimdiadd[1]=7; 
		 
	  }
	 }
     else if (wdimdiadd[1]>=7) {} 
	 }



Script "MDI_PrintScoreboard" (void)
{
While(GetCvar("WDIMDISeason")>0)
{
str LVL = "acci";
if (MUTILATOR_MOD() == 2) LVL = "movi";


SetHUDSize(1024, 768, 0);
SetFont("confont");
HudMessageBold(s:"Season ",i:GetCvar("WDIMDISeason"); HUDMSG_FADEOUT, 1377,CR_GREY, 512.0, 560.0, 1.0, 1.0 );
HudMessageBold(s: "TOP SURVIVORS\n\n\n\n",s: "\cg1. \cc",i: GetCvar(strParam(s:LVL , s:"_TopVictim1Score")),s:" PTS  ",s:GetCvarString(strParam(s:LVL , s:"_TopVictim1")),s:"\n\n",
s: "\cg2. \cc",i: GetCvar(strParam(s:LVL , s:"_TopVictim2Score")),s:" PTS  ",s:GetCvarString(strParam(s:LVL , s:"_TopVictim2")),s:"\n\n",
s: "\cg3. \cc",i: GetCvar(strParam(s:LVL , s:"_TopVictim3Score")),s:" PTS  ",s:GetCvarString(strParam(s:LVL , s:"_TopVictim3")),s:"\n\n",
s: "\cg4. \cc",i: GetCvar(strParam(s:LVL , s:"_TopVictim4Score")),s:" PTS  ",s:GetCvarString(strParam(s:LVL , s:"_TopVictim4")),s:"\n\n",
s: "\cg5. \cc",i: GetCvar(strParam(s:LVL , s:"_TopVictim5Score")),s:" PTS  ",s:GetCvarString(strParam(s:LVL , s:"_TopVictim5")); HUDMSG_FADEOUT, 1378, CR_GREY, 768.0, 600.0, 1.0, 1.0 );
HudMessageBold(s: "TOP MUTILATORS\n\n\n\n",s: "\cg1. \cc",i: GetCvar(strParam(s:LVL , s:"_TopMutilator1Score")),s:" PTS ",s:GetCvarString(strParam(s:LVL , s:"_TopMutilator1")),s:"\n\n",
s: "\cg2. \cc",i: GetCvar(strParam(s:LVL , s:"_TopMutilator2Score")),s:" PTS ",s:GetCvarString(strParam(s:LVL , s:"_TopMutilator2")),s:"\n\n",
s: "\cg3. \cc",i: GetCvar(strParam(s:LVL , s:"_TopMutilator3Score")),s:" PTS ",s:GetCvarString(strParam(s:LVL , s:"_TopMutilator3")),s:"\n\n",
s: "\cg4. \cc",i: GetCvar(strParam(s:LVL , s:"_TopMutilator4Score")),s:" PTS ",s:GetCvarString(strParam(s:LVL , s:"_TopMutilator4")),s:"\n\n",
s: "\cg5. \cc",i: GetCvar(strParam(s:LVL , s:"_TopMutilator5Score")),s:" PTS ",s:GetCvarString(strParam(s:LVL , s:"_TopMutilator5")); HUDMSG_FADEOUT, 1379, CR_GREY, 256.0, 600.0, 1.0, 1.0 );
if (getcvar("RoundsLeft")>0) {HudMessageBold(i:GetCvar("RoundsLeft")-1, s:" rounds left"; HUDMSG_FADEOUT, 0, CR_DARKRED, 512.0, 650.0, 1.0, 1.0);}
HudMessageBold(s:GetCvarString("ScoreRemark"); HUDMSG_FADEOUT, 0, CR_DARKRED, 512.0, 670.0, 1.0, 1.0);
if (getcvar("ScoreWinnerMini")>0)
{HudMessageBold(s:GetCvarString("ZHAWINNERn"), s:" is the Arcade winner with ",i:endcam[7],s:" points."; HUDMSG_FADEOUT, 1376,CR_GREY, 512.0, 695.0, 1.0, 1.0 );}
delay(35);
}}



Script "MDI_PrintScoreboard_ENTER" ENTER 
{
if ((MUTILATOR_MOD() > 0) && (GetCvar("WDIMDISeason")>0)) 
{

str LVL = "acci";
if (MUTILATOR_MOD() == 2) LVL = "movi";

SetHUDSize(1024, 768, 0);
SetFont("confont");
HudMessage(s:GetCvarString("ScoreRemark"); HUDMSG_FADEOUT, 0, CR_DARKRED, 512.0, 480.0, 8.0, 2.0);
HudMessage(s:"Season ",i:GetCvar("WDIMDISeason"); HUDMSG_FADEOUT, 1377,CR_GREY, 512.0, 510.0, 8.0, 2.0 );
if (getcvar("RoundsLeft")>0) HudMessage(i:GetCvar("RoundsLeft")-1, s:" rounds left"; HUDMSG_FADEOUT, 0, CR_DARKRED, 512.0, 530.0, 8.0, 2.0);


HudMessage(s: "TOP SURVIVORS\n\n\n\n",s: "\cg1. \cc",i: GetCvar(strParam(s:LVL , s:"_TopVictim1Score")),s:" PTS  ",s:GetCvarString(strParam(s:LVL , s:"_TopVictim1")),s:"\n\n",
s: "\cg2. \cc",i: GetCvar(strParam(s:LVL , s:"_TopVictim2Score")),s:" PTS  ",s:GetCvarString(strParam(s:LVL , s:"_TopVictim2")),s:"\n\n",
s: "\cg3. \cc",i: GetCvar(strParam(s:LVL , s:"_TopVictim3Score")),s:" PTS  ",s:GetCvarString(strParam(s:LVL , s:"_TopVictim3")),s:"\n\n",
s: "\cg4. \cc",i: GetCvar(strParam(s:LVL , s:"_TopVictim4Score")),s:" PTS  ",s:GetCvarString(strParam(s:LVL , s:"_TopVictim4")),s:"\n\n",
s: "\cg5. \cc",i: GetCvar(strParam(s:LVL , s:"_TopVictim5Score")),s:" PTS  ",s:GetCvarString(strParam(s:LVL , s:"_TopVictim5")); HUDMSG_FADEOUT, 1378, CR_GREY, 768.0, 550.0, 8.0, 1.0 );
HudMessage(s: "TOP MUTILATORS\n\n\n\n",s: "\cg1. \cc",i: GetCvar(strParam(s:LVL , s:"_TopMutilator1Score")),s:" PTS ",s:GetCvarString(strParam(s:LVL , s:"_TopMutilator1")),s:"\n\n",
s: "\cg2. \cc",i: GetCvar(strParam(s:LVL , s:"_TopMutilator2Score")),s:" PTS ",s:GetCvarString(strParam(s:LVL , s:"_TopMutilator2")),s:"\n\n",
s: "\cg3. \cc",i: GetCvar(strParam(s:LVL , s:"_TopMutilator3Score")),s:" PTS ",s:GetCvarString(strParam(s:LVL , s:"_TopMutilator3")),s:"\n\n",
s: "\cg4. \cc",i: GetCvar(strParam(s:LVL , s:"_TopMutilator4Score")),s:" PTS ",s:GetCvarString(strParam(s:LVL , s:"_TopMutilator4")),s:"\n\n",
s: "\cg5. \cc",i: GetCvar(strParam(s:LVL , s:"_TopMutilator5Score")),s:" PTS ",s:GetCvarString(strParam(s:LVL , s:"_TopMutilator5")); HUDMSG_FADEOUT, 1379, CR_GREY, 256.0, 550.0, 8.0, 1.0 );
ACS_NamedExecuteAlways("MDI_ShowVotes", 0);
}
}

Script "MDI_ShowVotes"(void) NET
{
str voteresult = "against";
str abst = "";
if (MDIglobal[0] == 1) voteresult = "for";
//if (MDIglobal[5] > 0) abst = strparam(i:MDIglobal[5], s:" abstained");

SetHUDSize(1024, 768, 0);
SetFont("confont");
/*HudMessage(i:MDIglobal[2], s:"%*/HudMessage(s:"A majority voted ", s:voteresult, s:" 'The Mutilator' mode  (", s:MDIVoteDate, s:")"; HUDMSG_FADEOUT, 0, CR_GREY, 512.0, 630.0, 12.0, 2.0);
HudMessage(f:MDIglobal[3], s:" voted YES    ", f:MDIglobal[4], s:" voted NO"/*, s:abst*/; HUDMSG_FADEOUT, 0, CR_GREY, 512.0, 645.0, 12.0, 2.0);
}


/*MMMMMMMMMMMMMMMMMMMMNNMMNMMMMMMMMMNMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMssyNMMh+``hm::+hNMMMMy`mMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMs   :N+    dM/ ` :yMMN. yMMMMMMMMMMMMMMMM
MMMMMMMMMMMMN`    -    -Ms `h+  hMs `NMMMMMMMMMMMMMMMM
MMMMMMMMMMMMs  o.  ``  hm` oMm` /N` +MMMMMMMMMMMMMMMMM
MMMMMMMMMMMN. -Nd+/+  -M: -NN/  ys  hMMMMMMMMMMMMMMMMM
MMMMMMMMMMM+  sMMMM-  yh  .-. .yM- /MMMMMMMMMMMMMMMMMM
MMMMMMMMMMMo:oMMMMMy+sMd///+sdNMMhsNMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Keeping these functions here to read them straight from CLASSIC*/

function void resetinventoryselfMDI(void)
{
	SetActorProperty(ActivatorTID(), APROP_HEALTH, 100);
	SetActorProperty(ActivatorTID(), APROP_SPAWNHEALTH, 100);
				TakeActorInventory(ActivatorTID(), "Victim1", 999);
				TakeActorInventory(ActivatorTID(), "Victim2", 999);
				TakeActorInventory(ActivatorTID(), "Victim3", 999);
				TakeActorInventory(ActivatorTID(), "Victim4", 999);
                TakeActorInventory(ActivatorTID(), "Mutilator1", 999);
				TakeActorInventory(ActivatorTID(), "Mutilator2", 999);
				TakeActorInventory(ActivatorTID(), "Mutilator3", 999);
				TakeActorInventory(ActivatorTID(), "Mutilator4", 999);
				TakeActorInventory(ActivatorTID(), "Mutilator5", 999);
				TakeActorInventory(ActivatorTID(), "Mutilator6", 999);
				TakeActorInventory(ActivatorTID(), "Mutilator7", 999);
				TakeActorInventory(ActivatorTID(), "Mutilator99", 999);
				TakeActorInventory(ActivatorTID(), "Mutilator100", 999);
				TakeActorInventory(ActivatorTID(), "IsVictim", 999);
				TakeActorInventory(ActivatorTID(), "IsMutilator", 999);
				TakeActorInventory(ActivatorTID(), "BEINGCHASED", 999);
				TakeActorInventory(ActivatorTID(), "STARTEDCHASE", 999);
				TakeActorInventory(ActivatorTID(), "SSTAMINA", 2999);
				TakeActorInventory(ActivatorTID(), "IsInWater", 999);
				TakeActorInventory(ActivatorTID(), "VILL_gamecore", 999);
				TakeActorInventory(ActivatorTID(), "DrugKit", 999);
				TakeActorInventory(ActivatorTID(), "Methamphetamine", 999);
				TakeActorInventory(ActivatorTID(), "Adrenaline_", 999);
				TakeActorInventory(ActivatorTID(), "SmokeBombMDI", 999);
				TakeActorInventory(ActivatorTID(), "mdipts", 999);
				TakeActorInventory(ActivatorTID(), "AreaTarget", 9999);
				TakeActorInventory(ActivatorTID(), "StageStatus", 999);
				TakeActorInventory(ActivatorTID(), "LessRange", 999);
				TakeActorInventory(ActivatorTID(), "AnswerPenalty", 999);
				TakeActorInventory(ActivatorTID(), "Snakebit", 999);
				TakeActorInventory(ActivatorTID(), "SSawhit", 999);
				TakeActorInventory(ActivatorTID(), "EggClothOn", 999);
				TakeActorInventory(ActivatorTID(), "StunGas", 999);
				TakeActorInventory(ActivatorTID(), "StunGasFinale", 999);
				TakeActorInventory(ActivatorTID(), "VIDIMOST", 999);
				TakeActorInventory(ActivatorTID(), "AskPenalty", 999);
				TakeActorInventory(ActivatorTID(), "SKIPINTRO", 999);
				TakeActorInventory(ActivatorTID(), "IsQuiet", 999);
				TakeActorInventory(ActivatorTID(), "SawVampyr", 999);
				TakeActorInventory(ActivatorTID(), "CanRecord", 999);
				TakeActorInventory(ActivatorTID(), "LetterRec", 999);
				TakeActorInventory(ActivatorTID(), "FistPenalty", 999);
				TakeActorInventory(ActivatorTID(), "MDIhero", 999);
				TakeActorInventory(ActivatorTID(), "Assist1", 999);
				TakeActorInventory(ActivatorTID(), "Assist2", 999);
				TakeActorInventory(ActivatorTID(), "IsAssist", 999);
				TakeActorInventory(ActivatorTID(), "GetAssist1", 999);
				TakeActorInventory(ActivatorTID(), "GetAssist2", 999);
				TakeActorInventory(ActivatorTID(), "SpinCNTR", 999);
				TakeActorInventory(ActivatorTID(), "CreateAssist1", 999);
				TakeActorInventory(ActivatorTID(), "CreateAssist2", 999);
				TakeActorInventory(ActivatorTID(), "SoundEmitterMDI", 999);
				TakeActorInventory(ActivatorTID(), "RemoteCameraMDI", 999);
				TakeActorInventory(ActivatorTID(), "NormalChaseDist", 9999);
				TakeActorInventory(ActivatorTID(), "MutilatorPTS", 999);
				TakeActorInventory(ActivatorTID(), "IsTopVictim", 99);
				TakeActorInventory(ActivatorTID(), "WDItkAvenger", 99);
				TakeActorInventory(ActivatorTID(), "NMARER", 99);
				TakeActorInventory(ActivatorTID(), "truNMARER", 99);
				TakeActorInventory(ActivatorTID(), "QuestTimer", 99);
				TakeActorInventory(ActivatorTID(), "BearTrap", 99);
				TakeActorInventory(ActivatorTID(), "BearTrapStealth", 99);
				TakeActorInventory(ActivatorTID(), "SpawnedSpecspot", 99); 
				TakeActorInventory(ActivatorTID(), "CanSeeGhost", 99); 
				TakeActorInventory(ActivatorTID(), "SlenderMurdWall", 99); 
				TakeActorInventory(ActivatorTID(), "Timedexplosives", 99);
				TakeActorInventory(ActivatorTID(), "VoteYes", 99);
				TakeActorInventory(ActivatorTID(), "VoteNo", 99);
				TakeActorInventory(ActivatorTID(), "20Dollars", 99);
				TakeActorInventory(ActivatorTID(), "wdimditosurvive", 99);
				TakeActorInventory(ActivatorTID(), "mutilatorbonusitem", 99);
				TakeActorInventory(ActivatorTID(), "MDIpulse", 99);
				TakeActorInventory(ActivatorTID(), "ClientDrugKitUsed", 99);
				TakeActorInventory(ActivatorTID(), "RandomWeaponKit", 99);
				TakeActorInventory(ActivatorTID(), "IsSneaking", 99);
				TakeActorInventory(ActivatorTID(), "IsRunning", 99);
				TakeActorInventory(ActivatorTID(), "InvInvCloak", 99);
				TakeActorInventory(ActivatorTID(), "LatentFlashlight", 99); 
				TakeActorInventory(ActivatorTID(), "ClientCanVote", 99);
				
				SetActorProperty(ActivatorTID(), APROP_Mass, 0x7fffffff);
				if (MUTILATOR_MOD() > 0)
				
{
				TakeActorInventory(ActivatorTID(), "Smallkit", 999);
				TakeActorInventory(ActivatorTID(), "FistWithFlashlight", 999);
}

}

function void resetinventoryMDI(void)
{
	for(int tx = 0; tx <= 32; tx++)
	{

				TakeActorInventory(TID_START+tx, "Victim1", 999);
				TakeActorInventory(TID_START+tx, "Victim2", 999);
				TakeActorInventory(TID_START+tx, "Victim3", 999);
				TakeActorInventory(TID_START+tx, "Victim4", 999);
                TakeActorInventory(TID_START+tx, "Mutilator1", 999);
				TakeActorInventory(TID_START+tx, "Mutilator2", 999);
				TakeActorInventory(TID_START+tx, "Mutilator3", 999);
				TakeActorInventory(TID_START+tx, "Mutilator4", 999);
				TakeActorInventory(TID_START+tx, "Mutilator5", 999);
				TakeActorInventory(TID_START+tx, "Mutilator6", 999);
				TakeActorInventory(TID_START+tx, "Mutilator7", 999);
				TakeActorInventory(TID_START+tx, "Mutilator99", 999);
				TakeActorInventory(TID_START+tx, "Mutilator100", 999);
				TakeActorInventory(TID_START+tx, "IsVictim", 999);
				TakeActorInventory(TID_START+tx, "IsMutilator", 999);
				TakeActorInventory(TID_START+tx, "BEINGCHASED", 999);
				TakeActorInventory(TID_START+tx, "STARTEDCHASE", 999);
				TakeActorInventory(TID_START+tx, "SSTAMINA", 2999);
				TakeActorInventory(TID_START+tx, "IsInWater", 999);
				TakeActorInventory(TID_START+tx, "VILL_gamecore", 999);
				TakeActorInventory(TID_START+tx, "DrugKit", 999);
				TakeActorInventory(TID_START+tx, "Methamphetamine", 999);
				TakeActorInventory(TID_START+tx, "Adrenaline_", 999);
				TakeActorInventory(TID_START+tx, "SmokeBombMDI", 999);
				TakeActorInventory(TID_START+tx, "mdipts", 999);
				TakeActorInventory(TID_START+tx, "AreaTarget", 9999);
				TakeActorInventory(TID_START+tx, "StageStatus", 999);
				TakeActorInventory(TID_START+tx, "LessRange", 999);
				TakeActorInventory(TID_START+tx, "AnswerPenalty", 999);
				TakeActorInventory(TID_START+tx, "Snakebit", 999);
				TakeActorInventory(TID_START+tx, "SSawhit", 999);
				TakeActorInventory(TID_START+tx, "EggClothOn", 999);
				TakeActorInventory(TID_START+tx, "StunGas", 999);
				TakeActorInventory(TID_START+tx, "StunGasFinale", 999);
				TakeActorInventory(TID_START+tx, "VIDIMOST", 999);
				TakeActorInventory(TID_START+tx, "AskPenalty", 999);
				TakeActorInventory(TID_START+tx, "SKIPINTRO", 999);
				TakeActorInventory(TID_START+tx, "IsQuiet", 999);
				TakeActorInventory(TID_START+tx, "SawVampyr", 999);
				TakeActorInventory(TID_START+tx, "CanRecord", 999);
				TakeActorInventory(TID_START+tx, "LetterRec", 999);
				TakeActorInventory(TID_START+tx, "FistPenalty", 999);
				TakeActorInventory(TID_START+tx, "MDIhero", 999);
				TakeActorInventory(TID_START+tx, "Assist1", 999);
				TakeActorInventory(TID_START+tx, "Assist2", 999);
				TakeActorInventory(TID_START+tx, "IsAssist", 999);
				TakeActorInventory(TID_START+tx, "GetAssist1", 999);
				TakeActorInventory(TID_START+tx, "GetAssist2", 999);
				TakeActorInventory(TID_START+tx, "SpinCNTR", 999);
				TakeActorInventory(TID_START+tx, "CreateAssist1", 999);
				TakeActorInventory(TID_START+tx, "CreateAssist2", 999); 
				TakeActorInventory(TID_START+tx, "SoundEmitterMDI", 999);
				TakeActorInventory(TID_START+tx, "RemoteCameraMDI", 999);
				TakeActorInventory(TID_START+tx, "NormalChaseDist", 9999);
				TakeActorInventory(TID_START+tx, "MutilatorPTS", 999);
				TakeActorInventory(TID_START+tx, "IsTopVictim", 99);
				TakeActorInventory(TID_START+tx, "WDItkAvenger", 99);
				TakeActorInventory(TID_START+tx, "NMARER", 99);
				TakeActorInventory(TID_START+tx, "truNMARER", 99);
				TakeActorInventory(TID_START+tx, "QuestTimer", 99);
				TakeActorInventory(TID_START+tx, "Beartrap", 99);
				TakeActorInventory(TID_START+tx, "BeartrapStealth", 99);
				TakeActorInventory(TID_START+tx, "SpawnedSpecspot", 99);  
				TakeActorInventory(TID_START+tx, "CanSeeGhost", 99); 
				TakeActorInventory(TID_START+tx, "SlenderMurdWall", 99);
				TakeActorInventory(TID_START+tx, "Timedexplosives", 99); 
				TakeActorInventory(TID_START+tx, "VoteYes", 99); 
				TakeActorInventory(TID_START+tx, "VoteNo", 99);
				TakeActorInventory(TID_START+tx, "20Dollars", 99);
				TakeActorInventory(TID_START+tx, "WDIMDItosurvive", 99);
				TakeActorInventory(TID_START+tx, "mutilatorbonusitem", 99);
				TakeActorInventory(TID_START+tx, "MDIpulse", 99);
				TakeActorInventory(TID_START+tx, "ClientDrugKitUsed", 99);
				TakeActorInventory(TID_START+tx, "RandomWeaponKit", 99);
				TakeActorInventory(TID_START+tx, "IsSneaking", 99);
				TakeActorInventory(TID_START+tx, "IsRunning", 99);
				TakeActorInventory(TID_START+tx, "InvInvCloak", 99);
				TakeActorInventory(TID_START+tx, "LatentFlashlight", 99);
				TakeActorInventory(TID_START+tx, "ClientCanVote", 99);
				
				TakeActorInventory(TID_START+tx, APROP_Mass, 0x7fffffff);
				if (MUTILATOR_MOD() > 0)
{
				TakeActorInventory(TID_START+tx, "Smallkit", 999);
				TakeActorInventory(TID_START+tx, "FistWithFlashlight", 999);
}
}
}


str GoalBonus[15] =
{"StunGas",
"Drugkit",
"Smallkit",
"Drugkit",
"SmokebombMDI",
"Flare",
"Drugkit",
"SoundEmitterMDI",
"Drugkit",
"SmokeBombMDI",
"Bigkit",
"RaveKit",
"",
"",
""};



Script "MDI_EXIT" (VOID)
{
	SetActivator(0, AAPTR_NULL);
	SetHUDSize(640, 480, 0);
	SetFont("Bigfont");
	HudMessageBold(s: mdiend[0]; HUDMSG_FADEINOUT, 0, CR_GREY, 320.0, 280.0, 35.0, 1.0, 1.0);
	{
	if (playinfo[4] == END_MURLOSE)
	{}
	else if (playinfo[4] == END_INOLOSE)
	 {
	Delay(sek * 4);
	Wdi_Setinvulnerable(FALSE);
	SetPlayerProperty(1,0,PROP_FROZEN); 
	SetPlayerProperty(1,0,PROP_TOTALLYFROZEN);  
	SetPlayerProperty(1,0,PROP_FLY); 
	delay(1); 
	Exit_Normal(0); //test//ConsoleCommand("nextmap");
	}

	//ResetInventory();
    //resetinventoryMDI();
	}
	Delay(sek * 4);
	Wdi_Setinvulnerable(FALSE);
	SetPlayerProperty(1,0,PROP_FROZEN); 
	SetPlayerProperty(1,0,PROP_TOTALLYFROZEN);  
	SetPlayerProperty(1,0,PROP_FLY); 
	delay(1);
Exit_Normal(0);//ConsoleCommand("nextmap");
	//Exit_Normal(0);
	Delay(1);
	terminate;
}

Script "ENDING_CAMERA" (void)
{
SetActivator(0, AAPTR_NULL);
ACS_NamedTerminate("TakeSanity", 0);
Fadeto(0,0,0, 1.0, 1.0);
delay(40);
Fadeto(0,0,0, 0.0, 3.0);
changecamera(endcam[0], 1, 0);
Thing_Activate(endcam[0]);
}


function void givemutilatorequipment(int who)   //MDI EDIT takes/gives items right after givemurdererequipment function
{
	GiveActorInventory(who, "Slot1Filled", 1);
    GiveActorInventory(who, "PersonaLuck", 4);
	TakeActorInventory(who, "MurderKnife", 999);
	TakeActorInventory(who, "Victim1", 999);
	TakeActorInventory(who, "Victim2", 999);
	TakeActorInventory(who, "Victim3", 999);
	TakeActorInventory(who, "Victim4", 999);
	TakeActorInventory(who, "SmallKit", 100);
	TakeActorInventory(who, "Flare", 100);
	TakeActorInventory(who, "BigKit", 100);
	SetActorProperty(who, APROP_Health, (100 + (PlayerCount() - 2) * GetCVar("wdi_murd_healthbonus"))); //Set his health to however many players are in the game + 100.
	SetActorProperty(who, APROP_SpawnHealth, (100 + (PlayerCount() - 2) * GetCVar("wdi_murd_healthbonus")));

	TakeActorInventory(who, "ChlorineGas", 999); // Poison Gas x1
	TakeActorInventory(who, "TripShotgun", 999); // TripWire Shotguns x2
	TakeActorInventory(who, "SmokeBomb", 999); // Smoke Bombs x2
	TakeActorInventory(who, "RemoteCamera", 999); // Remote Camera x1
	TakeActorInventory(who, "FakeStim", 999); // Fake Stimpack x3
	TakeActorInventory(who, "SoundEmitter", 999); // Sound Emitters x4
	
	TakeActorInventory(who, "MurdBackpack", 999); // Poison Gas x1
	
	
	//
     GiveActorInventory(who, "RemoteCameraMDI", 1); // Remote Camera x1
	 GiveActorInventory(who, "MurderDoorUnblocker", 1); // Remote Camera x1
	 GiveActorInventory(who, MutilatorType[0],1);
	 GiveActorInventory(who, "RemoteCameraMDI", 1);
     
	 //GiveActorInventory(who, "MutilatorSpecial", 1);
if (CheckInventory("mutilatorbonusitem")) 
{
GiveInventory("TripShotgun", 1); GiveInventory("BeartrapStealth", 1); GiveInventory("Beartrap", 1);GiveInventory("UndeadCome", 1);
}
}








////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////      Additional Mutilator Behavior
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



script "S_ManiacLaugh" (void)
{
while(true)
{
PlaySound(0,MutilatorType[2], 5 , 1.0,  false, ATTN_NORM, 0 );
delay(laughdel*35);
}
}



script "MutiRegen" (void)

{
while (GetCVAR("MDISTATE") < 3)
{
SetActorProperty(0, APROP_Health, 999);
delay(35);
}
delay(4*35);
SetActorProperty(0, APROP_Health, (PlayerCount()*100)/2);
}



/////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////      Mutilator items

Script "S_UndeadCome" (void)
{
AmbientSound("YZLAUGHA", 127);
SpawnspotForced("Trite", MDITELEPORTA+random(0,14), 11444, 0);
delay(35);
SpawnspotForced("FemaleZombie", MDITELEPORTA+random(15,31), 11444, 0);
SpawnspotForced("FemaleZombie", mdigame[16] + 1, 11444, 0);
SpawnspotForced("Trite", mdigame[16], 11444, 0);
}

Script "S_MutilatorGotItem" (void)
{
LocalAmbientSound("pickups/ammo", 127);
fadeto(128, 128,128, 0.15, 0.025);
delay(5);
fadeto(0, 0, 0, 0.0, 2.0);
}









	script "S_StunMutilator" (void)
{
 if (CheckInventory("IsMutilator"))
{
      {for(int m = 0; m < 32; m++) {Thing_Remove(13700+m);}}
ActivatorSound("MTPain2", 127);
Print(s:"You are stunned for some time!");
SetPlayerProperty(0,  ON, PROP_FROZEN);
fadeto(64, 16, 16, 0.75, 1.0);
delay(35*(random(mdigame[13],mdigame[14])));
fadeto(64, 16, 16, 0.0, 3.0);
SetPlayerProperty(0,  OFF, PROP_FROZEN);
}
}

	script "S_GreyMutilator" (void)
{
 if (CheckInventory("IsMutilator"))
{
      {for(int m = 0; m < 32; m++) {Thing_Remove(13700+m);}}
ActivatorSound("MTPain2", 127);
fadeto(96, 96, 96, 0.90, 1.0);
delay(35*2);
fadeto(96, 96, 96, 0.0, 10.0);
}
}

script "711MDI" (void) //if STATEMENTS AAAAAAAAAA
{
	if(!ThingCountName("DeployedCameraMDI", 0))
	{
		GiveInventory("RemoteCameraLauncherMDI", 1);
		Delay(35);
		terminate;
	}

	if(ThingCountName("DeployedCameraMDI", 0))
	{
		if(bCameraState)
		{
			bCameraState = FALSE;
			UpdateClient(5,0,bCameraState);
			terminate;
		}

		else if(!bCameraState)
		{
			bCameraState = TRUE;
			UpdateClient(5,0,bCameraState);
			terminate;
		}
	}
}

script "712MDI" (void) ClientSide //onoff: 0 = OFF. 1 = ON. 2 = destroyed.
{
	if (!Client_action()) { terminate;}
	Delay(35);
	while( ThingCountName("DeployedCameraMDI", 0))
	{
		if(CheckInventory("MurderMarker"))
		{
			//Camera turned ON.
			if(ThingCountName("DeployedCameraMDI", 0))
			{
				if(bCameraState)
				{
					bHideCamera = FALSE;
					switch (getaspectratio())
					{
					case ASPECT_4_3:
						SetCameraToTexture(1337, "RECAMTX", 90);
						SetHUDSize(1024, 768, 0);
						SetFont("RECAMTX");
						HudMessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
						SetFont("TSTATIC1");
						HudMessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
						SetFont("TVBORD");
						HudMessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
						break;

					case ASPECT_5_4:
						SetCameraToTexture(1337, "RECAMTX", 90);
						SetHUDSize(1024, 768, 0);
						SetFont("RECAMTX");
						HudMessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
						SetFont("TSTATIC1");
						HudMessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
						SetFont("TVBORD");
						HudMessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
						break;

					case ASPECT_16_9:
						SetCameraToTexture(1337, "RECAMTX", 90);
						SetHUDSize(1024, 768, 0);
						SetFont("RECAMTX");
						HudMessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
						SetFont("TSTATIC1");
						HudMessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
						SetFont("TVBORD");
						HudMessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
						break;

					case ASPECT_16_10:
						SetCameraToTexture(1337, "RECAMTX", 90);
						SetHUDSize(1024, 768, 0);
						SetFont("RECAMTX");
						HudMessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
						SetFont("TSTATIC1");
						HudMessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
						SetFont("TVBORD");
						HudMessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
						break;
					}
				}

				//Camera turned OFF. (By user)
				if(!bCameraState && !bHideCamera)
				{
					bHideCamera = TRUE;
					switch (getaspectratio())
					{
					case ASPECT_4_3:
						SetHUDSize(1024, 768, 0);
						SetFont("RECAMTX");
						HudMessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
						SetFont("STATIC1");
						HudMessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
						SetFont("TVBORD");
						HudMessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
						break;

					case ASPECT_5_4:
						SetHUDSize(1024, 768, 0);
						SetFont("RECAMTX");
						HudMessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
						SetFont("STATIC1");
						HudMessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
						SetFont("TVBORD");
						HudMessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
						break;

					case ASPECT_16_9:
						SetHUDSize(1024, 768, 0);
						SetFont("RECAMTX");
						HudMessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
						SetFont("STATIC1");
						HudMessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
						SetFont("TVBORD");
						HudMessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
						break;

					case ASPECT_16_10:
						SetHUDSize(1024, 768, 0);
						SetFont("RECAMTX");
						HudMessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
						SetFont("STATIC1");
						HudMessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
						SetFont("TVBORD");
						HudMessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
						break;
					}
				}
			}

			//Camera Destroyed.
			if(bCameraDestroyed && !bHideCamera)
			{
				bCameraDestroyed = FALSE;
				bCameraState = TRUE;
				bHideCamera = TRUE;
				switch (getaspectratio())
				{
				case ASPECT_4_3:
					SetCameraToTexture(1337, "RECAMTX", 90);
					SetHUDSize(1024, 768, 0);
					SetFont("RECAMTX");
					HudMessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 913.0, 688.0, 3.0);
					SetFont("TSTATIC1");
					HudMessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 913.0, 688.0, 3.0);
					SetFont("CAMCRPT");
					HudMessage(s:"a"; HUDMSG_PLAIN, 498, CR_UNTRANSLATED, 913.0, 688.0, 3.0);
					SetFont("TVBORD");
					HudMessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 913.0, 688.0, 3.0);

				case ASPECT_5_4:
					SetCameraToTexture(1337, "RECAMTX", 90);
					SetHUDSize(1024, 768, 0);
					SetFont("RECAMTX");
					HudMessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 913.0, 688.0, 3.0);
					SetFont("TSTATIC1");
					HudMessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 913.0, 688.0, 3.0);
					SetFont("CAMCRPT");
					HudMessage(s:"a"; HUDMSG_PLAIN, 498, CR_UNTRANSLATED, 913.0, 688.0, 3.0);
					SetFont("TVBORD");
					HudMessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 913.0, 688.0, 3.0);
					break;

				case ASPECT_16_9:
					SetCameraToTexture(1337, "RECAMTX", 90);
					SetHUDSize(1024, 768, 0);
					SetFont("RECAMTX");
					HudMessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1085.0, 688.0, 3.0);
					SetFont("TSTATIC1");
					HudMessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 1085.0, 688.0, 3.0);
					SetFont("CAMCRPT");
					HudMessage(s:"a"; HUDMSG_PLAIN, 498, CR_UNTRANSLATED, 1085.0, 688.0, 3.0);
					SetFont("TVBORD");
					HudMessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 1085.0, 688.0, 3.0);
					break;

				case ASPECT_16_10:
					SetCameraToTexture(1337, "RECAMTX", 90);
					SetHUDSize(1024, 768, 0);
					SetFont("RECAMTX");
					HudMessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1085.0, 688.0, 3.0);
					SetFont("TSTATIC1");
					HudMessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 1085.0, 688.0, 3.0);
					SetFont("CAMCRPT");
					HudMessage(s:"a"; HUDMSG_PLAIN, 498, CR_UNTRANSLATED, 1085.0, 688.0, 3.0);
					SetFont("TVBORD");
					HudMessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 1085.0, 688.0, 3.0);
					break;
				}

			}

			Delay(1);
		}

		Delay(1);
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////   SPEEEEEEEEEEEEED
///////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////









////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////     In/Off Water
////////////////////////////////////////////////////////////////////////

script "S_IsInWater" (void) { GiveInventory("IsInWater", 1); }


script "S_IsOnGround" (void) { TakeInventory("IsInWater", 999); }







////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////   Define gameplay style
///////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int chasedist = 1536;

script "define_gplayacount" OPEN
{
if (MUTILATOR_MOD() == 1)
  {
	While(true)
	{
     if (PlayerCount() >= 17)                           {mdigame[0] = 6; }
else if ((PlayerCount() >= 14) && (PlayerCount() < 17)) {mdigame[0] = 5; }
else if ((PlayerCount() >= 11) && (PlayerCount() < 14)) {mdigame[0] = 4;}
else if ((PlayerCount() >= 8) && (PlayerCount() < 11))  {mdigame[0] = 3;}
else if ((PlayerCount() >= 5) && (PlayerCount() < 8))   {mdigame[0] = 2;}
else if ((PlayerCount() >= 2) && (PlayerCount() < 5))   {mdigame[0] = 1;}
else if ((PlayerCount() >= 0) && (PlayerCount() < 2))   {mdigame[0] = 0;}
ACS_NamedExecute("define_MDIgame", 0);
delay(sek*2);
}
}
else{}
}


script "define_MDIgame" (VOID)
{

for(int ca = 0; ca < 32; ca++)
{/////////////////////////   Game Tempo     add.victimPTS  MTLR Laugh delay   Give Stamina    Take Stamina                                                           normal TakeSpeed ; if it bugs off
     if (mdigame[0] == 6) {mdigame[1] = 35; mdigame[2] = 0; mdigame[3] = 20; mdigame[5] = 2; mdigame[6] = 20; GiveActorInventory(TID_START+ca, "StageRangeMDI3", 1);}   
else if (mdigame[0] == 5) {mdigame[1] = 35; mdigame[2] = 0; mdigame[3] = 25; mdigame[5] = 2; mdigame[6] = 19; GiveActorInventory(TID_START+ca, "StageRangeMDI3", 1);} 
else if (mdigame[0] == 4) {mdigame[1] = 35; mdigame[2] = 0; mdigame[3] = 30; mdigame[5] = 2; mdigame[6] = 18; GiveActorInventory(TID_START+ca, "StageRangeMDI3", 1);} 
else if (mdigame[0] == 3) {mdigame[1] = 35; mdigame[2] = 1; mdigame[3] = 40; mdigame[5] = 2; mdigame[6] = 17; GiveActorInventory(TID_START+ca, "StageRangeMDI3", 1);} 
else if (mdigame[0] == 2) {mdigame[1] = 35; mdigame[2] = 2; mdigame[3] = 50; mdigame[5] = 2; mdigame[6] = 16; GiveActorInventory(TID_START+ca, "StageRangeMDI2", 1);} 
else if (mdigame[0] == 1) {mdigame[1] = 35;  mdigame[2] = 3; mdigame[3] = 60; mdigame[5] = 2; mdigame[6] = 15; GiveActorInventory(TID_START+ca, "StageRangeMDI1", 1);} 
else if (mdigame[0] == 0) {mdigame[1] = 35;  mdigame[2] = 0; mdigame[3] = 70; mdigame[5] = 2; mdigame[6] = 15; GiveActorInventory(TID_START+ca, "StageRangeMDI0", 1);} 
}
}

Script "S_StageRangeMDI6" (void) {SetAmmoCapacity("stagerange", 400);}
Script "S_StageRangeMDI5" (void) {SetAmmoCapacity("stagerange", 600);}
Script "S_StageRangeMDI4" (void) {SetAmmoCapacity("stagerange", 1200);}
Script "S_StageRangeMDI3" (void) {SetAmmoCapacity("stagerange", 1600);}
Script "S_StageRangeMDI2" (void) {SetAmmoCapacity("stagerange", 2400);}
Script "S_StageRangeMDI1" (void) {SetAmmoCapacity("stagerange", 3200);}
Script "S_StageRangeMDI0" (void) {SetAmmoCapacity("stagerange", 6400);}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////      OutlastMusic
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



















//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   STARTING GAME CONDITIONS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////   PLAYER PREPARATIONS


int RandArea[4] =
{
0,
6000,
7000,
8000};




script "MDI_PLAYERS_ENTER" ENTER
{
delay(1);
SetActorProperty(0, APROP_DamageFactor, 1.0);
if (MUTILATOR_MOD() > 0)
  {
delay(3);
SetAmmoCapacity("LessRange", 1);
SetAmmoCapacity("BeingChased", 0);
GiveInventory(strparam(s:"VICTIM", i:random(1,4)), 1); 
SetAmmoCapacity("PersonaLuck", random(1,4));
SetAmmoCapacity("ClothStatus", 0);
GiveInventory("SStamina", 9999);
}
}


// this script plays slightly before Mutilator was chosen. Time of it happening is defined by    wdimdiadd[17]
Script "MDI_INTRO" (void) 
{
if (MUTILATOR_MOD() == 0) Terminate;
//USED ONLY IN MAPS!!!!
}


// this script plays while mutilator is being chosen
script "MurdChoosingEX" (void) 
{
if (MUTILATOR_MOD() == 0) Terminate;
//USED ONLY IN MAPS!!!!
}



//Script commences once mutilator was chosen
script "MurdChosenEX" (int Murderer)
{
if (MUTILATOR_MOD() == 0) Terminate;
SetCVAR("MDISTATE", 1);
GiveMutilatorEquipment(TID_START+gameinfo[2]);
wdimdiadd[4]=3;
SetPlayerProperty(1,  ON, PROP_TOTALLYFROZEN);

AmbientSound("Game/MurdererChosen",127);
SetLineBlocking(16898, BLOCK_NOTHING);
SetLineTexture(16899, SIDE_FRONT, TEXTURE_MIDDLE, "TELR1");
ACS_NamedExecute("MDI_PROLOGUE", 0);
if(mdiprologue == true)
{
  while((mdigame[12] <= (PlayerCount()/2))  &&  (mdiprologue == true))
   {
   delay(1);
   }

mdiprologue = false;
ACS_NamedTerminate("MDI_PROLOGUE", 0);
ACS_NamedExecuteAlways("MDI_START", 0);
}
}






Script "MDI_PROLOGUE" (void) 
{
}


Script "MDI_TeleportToMap" (void)
{
int counter;
While(counter < 32)
 {
 Thing_move(TID_START + counter, MDITELEPORTA + counter, 1);
 SetActorAngle(TID_START + counter, Getactorangle(MDITELEPORTA + counter));
 counter++;
 }
}

Script "MDI_START" (void)
{
GiveActorInventory(TID_START+gameinfo[2], "MutilatorSpecial", 1);
ACS_NamedExecute("TakeQuestTimer", 0);
for(int v = 0; v < 32; v++)
   {
	   if (!CheckActorInventory(TID_START+v, "murdererkey")) //Victims
	      {
	        if (CheckActorInventory(TID_START+v, "mutilatorbonusitem")) {GiveActorInventory(TID_START+v, GoalBonus[random(0,1)], 1); GiveActorInventory(TID_START+v, "SmokebombMDI", 1); } 
			GiveActorInventory(TID_START+v, "SStamina", 9999);
			GiveActorInventory(TID_START+v, "VictimSpecial", 1);
   }
}

FadeTo(0, 0, 0, 1.0, 0.0);

ACS_NamedExecute("MDI_TeleportToMap", 0);
delay(35);
SetPlayerProperty(1,  OFF, PROP_TOTALLYFROZEN);
changecamera(0, 1, 0);
ACS_NamedExecute("MDI_GAME_STARTS_additionals", 0);
ACS_NamedExecute("zebtimer", 0);
ACS_NamedExecute("draw_clockicon", 0);
FadeTo(0, 0, 0, 0.0, 2.0);
SetCVAR("MDISTATE", 2);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////    HARDMODE    /////////////  SKIP INTRO CUTSCENE
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






Script "MDI_SKIP_NIGHTMARE" (void)
{
//int buttonzz;
//bool skip = false;
//bool nightmare = false;
 while(mdiprologue == true)
 {
SetFont("confont");
if(mdigame[12] <= (PlayerCount()/2))
HudMessageBold(s: "\cr", d: (FixedDiv(Int2Fix(mdigame[12]), Int2Fix(PlayerCount()))* 100) >> 16 , s: "% want to skip"; HUDMSG_FADEOUT, 1722, CR_DARKRED, 0.5, 0.90, 2.0, 1.0 );
delay(35);
}
if(mdigame[12] > (PlayerCount()/2)) HudMessageBold(s: "Skipping..."; HUDMSG_FADEOUT, 1722, CR_RED, 0.5, 0.90, 2.0, 1.0 ); 
TERMINATE;
}









script "S_MutilatorSpecial" (void)
{
if (MUTILATOR_MOD() == 2) Terminate;
ACS_NamedExecute("S_ManiacLaugh",0);
ACS_NamedExecute("S_ManiacLaugh", 0);
ACS_NamedExecute("MutiRegen", 0);

//SetPlayerProperty(0,  ON, PROP_TOTALLYFROZEN);
ACS_NamedExecute("MutilatorWait",0);
GiveInventory("IsMutilator",1);
GiveInventory("FistPenalty",2);
ACS_NamedExecute("MutilarMapAdd",0);
TakeInventory("MarkMe", 99);
LocalSetMusic("*");

}


script "S_VictimSpecial" (void)
{
if (MUTILATOR_MOD() == 2) Terminate;
if ((checkInventory("Victim1"))||(checkInventory("Victim2"))||(checkInventory("Victim3"))||(checkInventory("Victim4")))  {}
else { GiveInventory(strparam(s:"VICTIM", i:random(1,4)), 1) ;} //give victim shit to this ignorant motherfucker already
ACS_NamedExecuteAlways("S_SetMission",0);
SetActorProperty(0, APROP_Mass, 100);
SetAmmoCapacity("AreaTarget", RandArea[random(1,3)]);
SetAmmoCapacity("StageStatus", 100);
//TakeInventory("SKIPINTRO", 99);
//TakeInventory("NMARER", 99);
SetAmmoCapacity("PersonaLuck", random(1,4));
SetAmmoCapacity("StageIcon", mdigame[7]+1);
GiveInventory("IsVictim",1);
SetAmmoCapacity("PTSchance", 0);
GiveInventory("QuestTimer",60);
GiveInventory("FistPenalty",2);
GiveInventory("SStamina", 9999);
ACS_NamedExecuteALWAYS("VictimMapAdd",0);
			delay(15);
			//ACS_NamedExecuteAlways("STAGE",0);
			ACS_NamedExecuteAlways("STAGEinfo",0);
			delay(5);
//SetPlayerProperty(1,  OFF, PROP_TOTALLYFROZEN);
}



//int mdigamestarted = false;
Script "MutilarMapAdd" (VOID)
{}




Script "VictimMapAdd" (VOID)
{
If (CheckInventory("Flare")>1)
{TakeInventory("Flare", 1); }
delay(70);
restart;
}



int mutititid = 14390;

script "MutilatorWait" (void)
{
int wait = 12;
while (mdiprologue == true) delay(5);

//then continue
SpawnForced("dec_MutiWaitRemain", GetActorX(0), GetActorY(0), GetActorZ(0)+64.0, mutititid, 0);

while(wait > 0)
{
str MutiWaitRemain = StrParam(s: "MUTITI", i: wait);
PlaySound(0,MutilatorType[3], 6 , 1.0,  false, ATTN_NORM, 0 );
SetPlayerProperty(0,  ON, PROP_TOTALLYFROZEN);
FadeTo(0, 0, 0, 1.0, 0.0);
SetActorState (mutititid, MutiWaitRemain, TRUE);
SetFont("confont");
HudMessage(s: "Alive in ", i: wait; HUDMSG_FADEOUT, 17321, CR_RED, 0.5, 0.90, 2.0, 1.0 );

delay(35);
wait--;
}

SetActorState (mutititid, "MUTITI0", TRUE);
SetActorProperty(0, APROP_Mass, 50);
SetPlayerProperty(0,  OFF, PROP_TOTALLYFROZEN);
FadeTo(0, 0, 0, 0.0, 3.0);
}



Script "MDI_TakeSanity" (void)
{
While(gameinfo[1] != GAMESTATE_GAMEOVER)
{
TakeActorInventory(TID_START+gameinfo[2], "MadMeter", 1);
delay(15);
}
}

str fnlphsmus[7] =
{"B9KQ3V9H",
"MZCHASE1",
"MZCHASE3",
"MZCHASE5",
"D_HLMS02",
"INCU7XW1",
"D_FINAL5"};


script "FINAL_PHASE_add" (void) {}

SCript "FINAL_PHASE" (VOID)
{
ACS_NamedExecute("FINAL_PHASE_add", 0);   
for(int i = 0; i < 32; i++)
{
if (checkActorInventory(TID_START+i, "IsVictim")) {GiveActorInventory(TID_START+i,"MDI_BEHINDYOU", 1);}
}
wdimdiadd[4]=1;

wdimdiadd[9] = (tallycounts[0]+playinfo[3]); //counting murdkills before finaphase

//wdimdiadd[9]=(tallycounts[0]+(playinfo[3]); //then we reduce kills cost when cavegame starts
SetPlayerProperty(1,  ON, PROP_TOTALLYFROZEN);
Wdi_Setinvulnerable(TRUE);
delay(60);
for(int k = 0; k < 32; k++){GiveActorInventory(TID_START+k,"FINAL_PHASE_PLAYERS", 1);}
SetActivator(0, AAPTR_NULL);
SetMusic("*");
mdigame[13] -= 5; //decrease stun time
mdigame[14] -= 8; //decrease stun time
ACS_NAMEDEXECUTE("MDI_ROUND_BEST_VICTIM", 0);
fadeto(0, 0, 0, 1.0, 0.0);
delay(140);
Thing_Remove(5577);
fadeto(0, 0, 0, 0.0, 2.0);
AmbientSound(MutilatorType[10], 127);
delay(105);
SetPlayerProperty(1,  OFF, PROP_TOTALLYFROZEN);
 for(int n = 0; n < 32; n++)
	{
      	if(CheckActorInventory(TID_START+n, "StunGas"))
			{
			    TakeActorInventory(TID_START+n, "StunGas", 99);
				GiveActorInventory(TID_START+n, "StunGasFinale", 1);
			}
}
Wdi_Setinvulnerable(FALSE);
SetMusic(fnlphsmus[random(0,6)]);
Ceiling_MoveToValue(118, 3, 328, 0);
delay(15*35);
ACS_NamedExecute("MDI_TakeSanity", 0);
delay(20*50);
SpawnSpotForced("FakePlank", mdigame[19], 0, 0);
}


script "S_FINAL_PHASE_PLAYERS" (void)
{
//str GetVictimType = StrParam( s:"Victim", c:GetChar(GetWeapon(), 6));
if (Checkinventory("MurdererKey"))
{
TakeInventory("IsInWater", 99);
SetFont("confont");
HudMessage(s: "ENOUGH! \n\n\nIt's time to play for real now!"; HUDMSG_FADEOUT, 1557, CR_RED, 0.5, 0.7, 4.0, 1.0 );
Teleport(mdigame[17], 0, 1);
delay(1);
SetActorProperty(0, APROP_Health, (50*PlayerCount())-50); 
LocalAmbientSound(MutilatorType[2], 127);
delay(140);
delay(3*35);
SetAmmoCapacity("StageStatus", 666);
ACS_NamedExecuteAlways("STAGEinfo",0);
}
else if (!Checkinventory("MurdererKey"))
{
If (Checkinventory("IsMutilator"))
{
resetinventoryself();
delay(1);
TakeInventory("SmallKit",99);
GiveInventory("Slot1Filled",1);//mutilatorssisters
SetFont("confont");
HudMessage(s: "Help Mutilator, kill the victims!"; HUDMSG_TYPEON, 1557, CR_RED, 0.5, 0.5/*320.0, 242.0*/, 2.0, 0.03, 1.0);
}
if ((CheckWeapon("Victim1"))|(CheckWeapon("Victim2"))) {LocalAmbientSound("P1Death", 127);}
if ((CheckWeapon("Victim3"))|(CheckWeapon("Victim4"))) {LocalAmbientSound("MKFSTUN", 127);}
delay(1);
SetAmmoCapacity("StageStatus", 555);
TakeInventory("IsInWater", 99);
TakeInventory("FistPenalty", 99);
TakeInventory("Victim1", 999);TakeInventory("Victim2", 999);TakeInventory("Victim3", 999);TakeInventory("Victim4", 999);
delay(1);
thing_move(ActivatorTID(), mdigame[18]+PlayerNumber(), 1);
delay(1);
ACS_NAMEDEXECUTEALWAYS("SwitchWeapon", 0);
SetActorProperty(0, APROP_Health, 100);
LocalAmbientSound("SDCONTUS", 127);
delay(140);
ACS_NAMEDTERMINATE("OKSPIN", 0);


delay(3*35);
}
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////      SINGLEPLAYER


Script "SINGLE" (VOID)
{
int ran = random(0,31);
SetCvar("dwangostart", 777);
fadeto(0,0,0, 1.0, 1.0);
delay(40);
/////////////////////////
//Print(d: 3200+TELEPP[TELEPPSEED][ActivatorTID()-600]); //teleport tid
/////////////////////////
thing_move(ActivatorTID(), 3200+ran, 1);
SetActorAngle(ActivatorTID(), Getactorangle(3200+ran));
ACS_NamedExecute("FADE_TimeAreaS", 0);
delay(1);
delay(35);
GiveInventory("IsVictim", 1);
fadeto(0,0,0, 0.0, 2.0);
delay(70);
SetAmmoCapacity("AreaTarget", RandArea[random(1,3)]);
SetAmmoCapacity("StageStatus", 100);
SetAmmoCapacity("PersonaLuck", random(1,4));
SetAmmoCapacity("StageIcon", mdigame[7]+1);
delay(35);
ACS_NamedExecute("Stage", 0);
ACS_NamedExecute("StageInfo", 0);
ACS_NamedExecute("Zebtimer", 0);
ACS_NamedExecute("draw_clockicon", 0);
ACS_NamedExecute("MDI_GAME_STARTS_additionals", 0);
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   TIMER
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /


//5 time fade presets, think it's enough   [number of type to cahnge color][R,G,B]
int TimeArea[5][3] ={ 
{ 10, 10, 16},
{ 0, 0, 0},
{ 0, 0, 0},
{ 0, 0, 0},
{ 0, 0, 0}};

int TDmultiplier[5][3] ={
{ 1, 1, 1},
{ 1, 1, 1},
{ 1, 1, 1},
{ 1, 1, 1},
{ 1, 1, 1}};




#define t_hourZ ""
#define t_minZ "0"
int t_hour = 19;
int t_min = 0;

str tminZ = "0";
str thourZ = "";


int TimeTendency = -1;


script "draw_clockicon" (void)
{
setfont("M_ZBTIME");
HudMessageBold(s:"A";
			HUDMSG_PLAIN, 3435, CR_RED, 0.95, 0.02, 0.0);
}


script "zebtimer" (void)
{


setfont("confont");
HudMessageBold(s:"\n\n\n", s:thourZ, d:t_hour, s:":", s:tminZ, d:t_min;
			HUDMSG_PLAIN, 3434, CR_RED, 0.955, 0.02, 3.0);



if ((t_min >= 0) && (t_min < 9))
{
t_min += 1;
tminZ = "0";
}
else if ((t_min >= 9) && (t_min < 59))
{
t_min += 1;
tminZ = "";
}

if ((t_min > 29) && (t_min < 31) && (t_hour != 23))
{
ACS_NamedExecute("TimefliesColor", 0);
}

if ((t_min > 29) && (t_min < 31) && (t_hour == 4))
{
TimeTendency = 0;
}

else if ((t_hour != 23) && (t_min == 59))
{
t_hour += 1;
t_min = 0;
tminZ = "0";
/////////////fx
ACS_NamedExecute("MDI_PerHourAdditional", 0);
ACS_NamedExecute("TimefliesColor", 0);
}

else if ((t_hour == 23) && (t_min == 59))
{
thourZ = "0";
t_hour = 0;
t_min = 0;
tminZ = "0";
/////////////fx
endcam[10] = 1;
TimeTendency = +1;
ACS_NamedExecute("MDI_PerHourAdditional", 0);
}
if ((t_hour == 5) && (t_min > random(0, 16)))
{
ACS_NamedExecute("FINAL_PHASE", 0);   //////////////////////////////end catmouse game and go to final phase

SetCVAR("MDISTATE", 3);
delay(1);
Terminate;
}

delay(mdigame[1]);
mdigame[4] = mdigame[4]+(TimeTendency);
Light_ChangeToValue(555, mdigame[4]);
ACS_NamedExecute("FADE_TimeAreaS", 0);
restart;
}

Script "TimefliesColor" (void)
{
TimeArea[0][0] = TimeArea[0][0]+((TimeTendency)*TDmultiplier[0][0]); TimeArea[0][1] = TimeArea[0][1]+((TimeTendency)*TDmultiplier[0][1]); TimeArea[0][2] = TimeArea[0][2]+((TimeTendency)*TDmultiplier[0][2]);
TimeArea[1][0] = TimeArea[1][0]+((TimeTendency)*TDmultiplier[1][0]); TimeArea[1][1] = TimeArea[1][1]+((TimeTendency)*TDmultiplier[1][1]); TimeArea[1][2] = TimeArea[1][2]+((TimeTendency)*TDmultiplier[1][2]);
TimeArea[2][0] = TimeArea[2][0]+((TimeTendency)*TDmultiplier[2][0]); TimeArea[2][1] = TimeArea[2][1]+((TimeTendency)*TDmultiplier[2][1]); TimeArea[2][2] = TimeArea[2][2]+((TimeTendency)*TDmultiplier[2][2]);
TimeArea[3][0] = TimeArea[3][0]+((TimeTendency)*TDmultiplier[3][0]); TimeArea[3][1] = TimeArea[3][1]+((TimeTendency)*TDmultiplier[3][1]); TimeArea[3][2] = TimeArea[3][2]+((TimeTendency)*TDmultiplier[3][2]);
TimeArea[4][0] = TimeArea[4][0]+((TimeTendency)*TDmultiplier[4][0]); TimeArea[4][1] = TimeArea[4][1]+((TimeTendency)*TDmultiplier[4][1]); TimeArea[4][2] = TimeArea[4][2]+((TimeTendency)*TDmultiplier[4][2]);
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   FINAL PHASE
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   QUESTS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
int AreaTargetArr[4] =
{0,
6000,
7000,
8000};



Script "S_SetMission" (void)             //////MISSION SET
 {
if (Checkinventory("MurdererKey"))
 {}
 else if (!Checkinventory("MurdererKey"))
 {
 if ((CheckInventory("mdipts")>=80) && (mdigame[15] ==2))           
 {mdigame[15] =3; GiveActorInventory(TID_START+gameinfo[2], "UndeadCome", 1);  GiveActorInventory(TID_START+gameinfo[2], "TripShotgun", 1); GiveActorInventory(TID_START+gameinfo[2], "MutilatorGotItem", 1); } //and then zombie ressurect give
  if ((CheckInventory("mdipts")>=60) && (mdigame[15] ==1))
 {mdigame[15] =2; GiveActorInventory(TID_START+gameinfo[2], "TripShotgun", 1); GiveActorInventory(TID_START+gameinfo[2], "BeartrapStealth", 1); GiveActorInventory(TID_START+gameinfo[2], "Beartrap", 1);GiveActorInventory(TID_START+gameinfo[2], "MutilatorGotItem", 1);} //second tripgive
 if ((CheckInventory("mdipts")>=30) && (mdigame[15] ==0))
 {mdigame[15] =1; GiveActorInventory(TID_START+gameinfo[2], "TripShotgun", 1); GiveActorInventory(TID_START+gameinfo[2], "Beartrap", 2); GiveActorInventory(TID_START+gameinfo[2], "MutilatorGotItem", 1);} //first tripgive
  SetAmmoCapacity("PersonaLuck", random(1,4));
  delay(1);
	 if (GetAmmoCapacity("AreaTarget") == 6000)
	   {
		if (GetAmmoCapacity("PersonaLuck") <= 2)
		{
		SetAmmoCapacity("AreaTarget", 7000);
		}
		else if (GetAmmoCapacity("PersonaLuck") >= 3)
		{
		SetAmmoCapacity("AreaTarget", 8000);
		}
	   }
	  else if (GetAmmoCapacity("AreaTarget") == 7000)
	   {
		if (GetAmmoCapacity("PersonaLuck") <= 2)
		{
		SetAmmoCapacity("AreaTarget", 8000);
		}
		else if (GetAmmoCapacity("PersonaLuck") >= 3)
		{
		SetAmmoCapacity("AreaTarget", 6000);
		}
	   }
	 else if (GetAmmoCapacity("AreaTarget") == 8000)
	   {
		if (GetAmmoCapacity("PersonaLuck") <= 2)
		{
		SetAmmoCapacity("AreaTarget", 6000);
		}
		else if (GetAmmoCapacity("PersonaLuck") >= 3)
		{
		SetAmmoCapacity("AreaTarget", 7000);
		}
	   }
LocalAmbientSound("Game/CountStart",127);
delay(5);
SetAmmoCapacity("PersonaLuck", random(1,4));
 }
}


str Goalcongrats[4] =
{"Well done!",
"Good job!",
"Keep going!",
"Outstanding!\n\nYou did all quests!\n\nTake these fireworks!"};





//Icons for quests
//str StageIcon[11] = {"", "", "", "", "", "", "", "", "", "", ""};

str MissionINFO[14] = {"","","","","","","","","","","","Defeat the Mutilator!", "Mutilate the victims!", "Kill the victims!"};

//Quest done sound
str MPassedSFX[10] = {"","","",	"","","","","","",""};


//use confont to have a quest explained in text, any other name with look for an Image
str MissionTypeFONT[12] = {"","","","","","","","","","",""};

//Coordinates for final mission. X - Longitude, Y - Latitude



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//arg3 = One of 3 global areas in a map to have a quest in, arg4 = Quest stage, arg5 = random spot in a global area
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



script "S_SetPuzzle" (void)
{}

Script "GOAL" (int arg3, int arg4, int arg5)   //FIND ITEM
{if ((GetAmmoCapacity("AreaTarget")==arg3) && (GetAmmoCapacity("StageStatus")==arg4) && (GetAmmoCapacity("PersonaLuck")==arg5) && (!Checkinventory("MurdererKey")))
{SetAmmoCapacity("AreaTarget", arg3); LocalAmbientSound(MPassedSFX[arg4/100],127);
SetAmmoCapacity("StageStatus", arg4 + 100);



{
if (CheckInventory("QuestTimer")>40) {SetAmmoCapacity("PTSchance", 3);}
else if ((CheckInventory("QuestTimer")>20) && (CheckInventory("QuestTimer")<41)) {SetAmmoCapacity("PTSchance", 2);}
else if ((CheckInventory("QuestTimer")>0) && (CheckInventory("QuestTimer")<21)) {SetAmmoCapacity("PTSchance", 1);}
else if (CheckInventory("QuestTimer")==0) {SetAmmoCapacity("PTSchance", 0);}
}
GiveInventory("mdipts", 4 + (arg4/100) + GetAmmoCapacity("PTSchance")); 

GiveInventory("mdipts", mdigame[2]);  SetAmmoCapacity("LessRange", GetAmmoCapacity("LessRange")+1); SetAmmoCapacity("StageIcon", GetAmmoCapacity("StageIcon")+1); 
if (CheckInventory("truNMARER")) GiveInventory("mdipts", 5);  
GiveInventory("QuestTimer",60);
Print(s: Goalcongrats[random(0,2)]);
delay(5);
SpawnSpotForced(GoalBonus[mdigame[0]+1+(random(mdigame[0], 6))], arg3+arg4+arg5, 0, 0);
ACS_NamedExecuteAlways("S_SetMission",0);}else{}}









Script "GOAL2" (int arg4)   // PHOTO
{if ((GetAmmoCapacity("StageStatus")==arg4) && (((GetActorAngle(0)>>8)>mdigame[8]) &&((GetActorAngle(0)>>8)<mdigame[9]))&& (!Checkinventory("MurdererKey")))
{SetAmmoCapacity("AreaTarget", AreaTargetArr[random(1,3)]); LocalAmbientSound(MPassedSFX[arg4/100],127); LocalAmbientSound(MPassedSFX[arg4/100],127);
SetAmmoCapacity("StageStatus", arg4 + 100);


{
if (CheckInventory("QuestTimer")>40) {SetAmmoCapacity("PTSchance", 3);}
else if ((CheckInventory("QuestTimer")>20) && (CheckInventory("QuestTimer")<41)) {SetAmmoCapacity("PTSchance", 2);}
else if ((CheckInventory("QuestTimer")>0) && (CheckInventory("QuestTimer")<21)) {SetAmmoCapacity("PTSchance", 1);}
else if (CheckInventory("QuestTimer")==0) {SetAmmoCapacity("PTSchance", 0);}
}
GiveInventory("mdipts", 5 + (arg4/100) + GetAmmoCapacity("PTSchance")); 

GiveInventory("mdipts", mdigame[2]); SetAmmoCapacity("LessRange", GetAmmoCapacity("LessRange")+1); SetAmmoCapacity("StageIcon", GetAmmoCapacity("StageIcon")+1);
if (CheckInventory("truNMARER")) GiveInventory("mdipts", 6);    
GiveInventory("QuestTimer",60);
ACS_NamedExecuteAlways("S_SetMission",0);
ACS_NamedExecuteAlways("S_SetPuzzle",0);


SpawnSpotForced("ActionMarkerBlue", 16890, 0,0);
fadeto(128, 128,128, 0.75, 0.025);
SetFont(MutilatorType[5]);
HudMessage(s: "A"; HUDMSG_FADEOUT, 1771, CR_GREY, 0.5, 0.97, 0.25, 1.0 );
delay(5);
fadeto(0, 0, 0, 0.0, 2.0);
Print(s: Goalcongrats[random(0,2)]);
SpawnSpotForced(GoalBonus[mdigame[0]+1+(random(mdigame[0], 6))], arg4, 0, 0);
}else{}}







Script "GOAL3" (int arg3, int arg4, int arg5)    //MATH
{if ((GetAmmoCapacity("AreaTarget")==arg3) && (GetAmmoCapacity("StageStatus")==arg4) && (CheckInventory("AnswerPenalty") == 0)&& (!Checkinventory("MurdererKey")))
{SetAmmoCapacity("AreaTarget", AreaTargetArr[random(1,3)]); LocalAmbientSound(MPassedSFX[arg4/100],127); LocalAmbientSound(MPassedSFX[arg4/100],127);
SetAmmoCapacity("StageStatus", arg4 + 100);


{
if (CheckInventory("QuestTimer")>40) {SetAmmoCapacity("PTSchance", 3);}
else if ((CheckInventory("QuestTimer")>20) && (CheckInventory("QuestTimer")<41)) {SetAmmoCapacity("PTSchance", 2);}
else if ((CheckInventory("QuestTimer")>0) && (CheckInventory("QuestTimer")<21)) {SetAmmoCapacity("PTSchance", 1);}
else if (CheckInventory("QuestTimer")==0) {SetAmmoCapacity("PTSchance", 0);}
}
GiveInventory("mdipts", 6 + (arg4/100) + GetAmmoCapacity("PTSchance"));  

GiveInventory("mdipts", mdigame[2]); SetAmmoCapacity("LessRange", GetAmmoCapacity("LessRange")+1); SetAmmoCapacity("StageIcon", GetAmmoCapacity("StageIcon")+1);
if (CheckInventory("truNMARER")) GiveInventory("mdipts", 7);  
GiveInventory("QuestTimer",60);
Print(s: Goalcongrats[random(0,2)]);
delay(5);
SpawnSpotForced(GoalBonus[mdigame[0]+1+(random(mdigame[0], 6))], arg3+arg4+arg5, 0, 0);
ACS_NamedExecuteAlways("S_SetMission",0);}
else if ((GetAmmoCapacity("AreaTarget")!=arg3) && (GetAmmoCapacity("StageStatus")==arg4) && (CheckInventory("AnswerPenalty") == 0)&& (!Checkinventory("MurdererKey")))
{
ACS_NamedExecuteAlways("S_AnswerPenaltyinfo",0);
ACS_NamedExecuteAlways("S_AnswerPenalty",0);
DamageThing(15, MOD_EXIT);
GiveInventory("AnswerPenalty", 10 + mdigame[0]);
}
else if ((GetAmmoCapacity("StageStatus")==arg4) && (CheckInventory("AnswerPenalty") > 0))
{
Print(s: "Wait till the penalty goes off");
}
else{Print(s: "What is this?");}}









Script "GOAL4" (int arg3, int arg4)   //TREASURE
{if ((GetAmmoCapacity("AreaTarget")==arg3) && (GetAmmoCapacity("StageStatus")==arg4)&& (!Checkinventory("MurdererKey")))
{SetAmmoCapacity("AreaTarget", arg3); LocalAmbientSound(MPassedSFX[arg4/100],127); LocalAmbientSound(MPassedSFX[arg4/100],127);
SetAmmoCapacity("StageStatus", arg4 + 100);

//GiveInventory("mdipts",(random(9+(arg4/100),11+(arg4/100))));  

{
if (CheckInventory("QuestTimer")>40) {SetAmmoCapacity("PTSchance", 3);}
else if ((CheckInventory("QuestTimer")>20) && (CheckInventory("QuestTimer")<41)) {SetAmmoCapacity("PTSchance", 2);}
else if ((CheckInventory("QuestTimer")>0) && (CheckInventory("QuestTimer")<21)) {SetAmmoCapacity("PTSchance", 1);}
else if (CheckInventory("QuestTimer")==0) {SetAmmoCapacity("PTSchance", 0);}
}
GiveInventory("mdipts", 7 + (arg4/100) + GetAmmoCapacity("PTSchance")); 

GiveInventory("mdipts", mdigame[2]); SetAmmoCapacity("LessRange", GetAmmoCapacity("LessRange")+1); GiveInventory("dec_setPosition", 1); SetAmmoCapacity("StageIcon", GetAmmoCapacity("StageIcon")+1);
if (CheckInventory("truNMARER")) GiveInventory("mdipts", 8);  
GiveInventory("QuestTimer",60);
Print(s: Goalcongrats[random(0,2)]);
delay(5);
SpawnSpotForced(GoalBonus[mdigame[0]+1+(random(mdigame[0], 6))], arg3+arg4, 0, 0);
ACS_NamedExecuteAlways("S_SetMission",0);}
else if ((GetAmmoCapacity("AreaTarget")!=arg3) && (GetAmmoCapacity("StageStatus")==arg4))
{
Print(s: "Looks like treasure is in another location. Damn!");
}
else{}}







Script "GOAL5" (void)  //FIND COORDS
{
If ((GetAmmoCapacity("StageStatus")==900)&& (!Checkinventory("MurdererKey")))
  {
   If ((GetActorX(0) > (mdigame[10] - 32.0)) && (GetActorX(0) < (mdigame[10] + 32.0)) && (GetActorY(0) > (mdigame[11] - 32.0)) && (GetActorY(0) < (mdigame[11] + 32.0)))
      {
    Print(s: Goalcongrats[3]);
	SetAmmoCapacity("StageStatus", 1000); LocalAmbientSound(MPassedSFX[9],127); GiveInventory("mdipts",(random(8 + mdigame[2], 10 + mdigame[2])));
    if (CheckInventory("truNMARER")) GiveInventory("mdipts", 10);  
	GiveInventory("Fireworks", 10);
	fadeto(128, 128,128, 0.75, 0.025);
delay(5);
fadeto(0, 0, 0, 0.0, 2.0);
	}
	else {}
  }
else {}
}

Script "S_AnswerPenalty" (void)
{
if (CheckInventory("AnswerPenalty")>0)
{
TakeInventory("AnswerPenalty", 1);
delay(35);
restart;
}
}

function void markquest (void)
{
str StageIconn = StrParam(s: "ICNM", d: GetAmmoCapacity("StageIcon")); //a precaution string
HudMessageOnActor((GetAmmoCapacity("AreaTarget") + GetAmmoCapacity("StageStatus") + GetAmmoCapacity ("PersonaLuck")), FixedDiv(GetAmmoCapacity("stagerange"),GetAmmoCapacity("LessRange")),StageIconn,"", 644); 
}





script "STAGE" (void) clientside
{
if (!Client_action()) { terminate;}
	while(true)
	{
		markquest();
		Delay(1);		
	}
}


Script "STAGEinfo" (void)
{
While(true)
{
if (GetAmmoCapacity("StageStatus")==555)
{
SetFont("confont");
HudMessage(s: MissionINFO[11]; HUDMSG_FADEOUT, 1777, CR_GREY, 0.5, 0.97, 2.0, 1.0 );
}
else if (GetAmmoCapacity("StageStatus")==666)
{
SetFont("confont");
HudMessage(s: MissionINFO[12]; HUDMSG_FADEOUT, 1777, CR_GREY, 0.5, 0.97, 2.0, 1.0 );
}
else if (GetAmmoCapacity("StageStatus")==669)
{
SetFont("confont");
HudMessage(s: MissionINFO[13]; HUDMSG_FADEOUT, 1777, CR_GREY, 0.5, 0.97, 2.0, 1.0 );
}

else if (((GetAmmoCapacity("StageStatus")<900)|(GetAmmoCapacity("StageStatus")>900)) && (GetAmmoCapacity("StageStatus")!=555)&& (GetAmmoCapacity("StageStatus")!=666)&& (GetAmmoCapacity("StageStatus")!=669))
{
SetFont(MissionTypeFONT[GetAmmoCapacity("StageStatus")/100]);
HudMessage(s: MissionINFO[0+(GetAmmoCapacity("StageStatus")/100)]; HUDMSG_FADEOUT, 1777, CR_GREY, 0.5, 0.97, 2.0, 1.0 );
}
else if ((GetAmmoCapacity("StageStatus")==900))
{
SetFont(MissionTypeFONT[GetAmmoCapacity("StageStatus")/100]);
HudMessage(s: MissionINFO[0+(GetAmmoCapacity("StageStatus")/100)], s:"LONGITUDE:  ", f:mdigame[10], s:"\n  LATITUDE:  ", f:mdigame[11]; HUDMSG_FADEOUT, 1777, CR_GREY, 0.5, 0.97, 2.0, 1.0 );
}
delay(70);
}
}



Script "S_AnswerPenaltyinfo" (void)
{
if (CheckInventory("AnswerPenalty") >= 1)
{
SetFont("confont");
HudMessage(s: "You were penalized for the wrong answer, try again in ", i: CheckInventory("AnswerPenalty"); HUDMSG_FADEOUT, 1772, CR_RED, 0.5, 0.90, 2.0, 1.0 );
delay(35);
restart;
}
else
{}
}


Script "S_SetPosition" (void)
{
While(true)
{
if (GetAmmoCapacity("StageStatus")==900)
{
SetFont("confont");
HudMessage(s:"LONGITUDE:", f:(GetActorX(0)), s:"\n\n", s:"LATITUDE:", f:(GetActorY(0)); HUDMSG_FADEOUT, 1762, CR_GREY, 0.8, 0.50, 2.0, 1.0 );
}
else if (GetAmmoCapacity("StageStatus")<900)
{}
else if (GetAmmoCapacity("StageStatus")>900)
{terminate;}
delay(2);
}
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   WEAPONSSHOP
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
str buywep[23] = {"",
	"FakePlank",        //5
	"FakeMolly",        //10
	"FakeBrick",        //15
	"SmallKit",         //20
	"FakeNailedPlank",  //25
	"FakeBat",          //30
	"FakeCrossbow",     //35
	"FakePipe",         //40
	"FakeTwig",         //45
	"FakeWrench",       //50
	"FakeSprayCanGRN",  //55
	"FakeAxe",          //60
	"FakeM1",           //65
	"FakeCue",          //70
	"FakeShovel",       //75
	"FakeChainsawfix",  //80
	"FakeBeretta",      //90
	"FakeShotgun",      //100
	////////////////
	"LoadedBolts",      //5
	"NewShell",         //3
	"M1Ammo",           //8
	"PistolClip",       //12
	};

str buyAmmotype[23] = {"",
	"",
	"",
	"",
	"",
	"",
	"",
	"",
	"",
	"",
	"",
	"SprayAmmo",
	"",
	"M1CarbineClipIn",
	"",
	"",
	"Gasoline",
	"PistolAmmo",
	"SuperShells",
	////////////////
	"",
	"",
	"",
	"",
	};

int buyAmmocnt[23] = {0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	300,
	0,
	3,
	0,
	0,
	500,
	3,
	1,
	////////////////
	0,
	0,
	0,
	0,
	};



 

Script "BuyWeapon" (int arg3, int arg4)
{
If (CheckInventory("MurdererKey"))  terminate;
If ((StrCmp(getcvarstring("wdooeredevp"), strParam(n:0)) == 0) && (MUTILATOR_MOD() == 1))
         {
		 if ((arg3 == 17)||(arg3 == 18)||(arg3 == 13)|(arg3 == 7)) 
		          {
				  Print(n:0, s:"! Your", s:buywep[arg3], s:" has been handed over to somebody else.\n\n That's how communism works: You earn - others take it from you 'for the sake of community'! \n\n\nThat's fair...don't you think?!"); 
				  LocalAmbientSound("COMMIE", 127);
				  int playanum = PlayerNumber();
				  int counter;
				  while(counter < 32)
				     {
					 if ((ClassifyActor(TID_START + counter) & ACTOR_ALIVE) && (counter != gameinfo[2]) && (counter != playanum))
					      {
						  SpawnSpotForced(buywep[arg3], TID_START + counter, 0, 0);
						  terminate;
						  }
                     counter++;
					 }
				  terminate;}
		 }
If ((CheckInventory("mdipts")>=arg4) && (!CheckInventory("MurdererKey")))
{

////////////////////////////NO MORE THAN 1 FIRE WEAPON
if (((arg3 == 17)||(arg3 == 18)||(arg3 == 13)) && ((ThingCountName("FakeBeretta",0)>0)||(ThingCountName("FakeShotgun",0)>0)||(ThingCountName("FakeM1",0)>0)))
{
Print(s: "Firearms are already lying somewhere");
Terminate;
}

if ((arg3 == 17)||(arg3 == 18)||(arg3 == 13))
{
    for(int k = 0; k < 32; k++)
	{
      	if((CheckActorInventory(TID_START+k, "Beretta"))||(CheckActorInventory(TID_START+k, "Shotgun2"))||(CheckActorInventory(TID_START+k, "M1Carbine")))
			{
			    Print(s: "Somebody already carries fire weapon");
				Terminate;
			}
}}
////////////////////////////NO MORE THAN 1 PoolCue 
if ((arg3 == 14) && (ThingCountName("FakeCue",0)>0))
{
Print(s: "Poolcue's already lying somewhere");
Terminate;
}

if (arg3 == 14)
{
    for(int l = 0; l < 32; l++)
	{
      	if(CheckActorInventory(TID_START+l, "PoolCue"))
			{
			    Print(s: "Somebody already carries pool cue");
				Terminate;
			}
}}

////////////////////////////NO MORE THAN 1 Shovel 
if ((arg3 == 15) && (ThingCountName("FakeShovel",0)>0))
{
Print(s: "Shovel's already lying somewhere");
Terminate;
}

if (arg3 == 15)
{
    for(int m = 0; m < 32; m++)
	{
      	if(CheckActorInventory(TID_START+m, "Shovel"))
			{
			    Print(s: "Somebody already carries shovel");
				Terminate;
			}
}}

////////////////////////////NO MORE THAN 1 xbow 
if ((arg3 == 7) && (ThingCountName("FakeCrossbow",0)>0))
{
Print(s: "Crossbow's already lying somewhere");
Terminate;
}

if (arg3 == 7)
{
    for(int n = 0; n < 32; n++)
	{
      	if(CheckActorInventory(TID_START+n, "LCrossbow"))
			{
			    Print(s: "Somebody already carries crossbow");
				Terminate;
			}
}}

////////////////////////////NO MORE THAN 1 chainsaw
if ((arg3 == 16) && (ThingCountName("FakeChainsawfix",0)>0))
{
Print(s: "Chainsaw's already lying somewhere");
Terminate;
}

if (arg3 == 16)
{
    for(int o = 0; o < 32; o++)
	{
      	if(CheckActorInventory(TID_START+o, "LChainsaw"))
			{
			    Print(s: "Somebody already carries chainsaw");
				Terminate;
			}
}}

////////////////////////////NO MORE THAN 1 xbow arrow
if ((arg3 == 19) && (ThingCountName("LoadedBolts",0)>0))
{
Print(s: "Bolt's already lying somewhere");
Terminate;
}

if (arg3 == 19)
{
    for(int p = 0; p < 32; p++)
	{
      	if((CheckActorInventory(TID_START+p, "LoadedBolts")) && (!CheckActorInventory(TID_START+p, "MurdererKey")))
			{
			    Print(s: "Some of your allies already took an arrow!");
				Terminate;
			}
}}

TakeInventory("mdipts", arg4);
GiveInventory(buyAmmotype[arg3], buyAmmocnt[arg3]);
SpawnSpotForced(buywep[arg3], 9100+arg3, 0, 0);
ActivatorSound("SDCLOTH", 127);
Print(s: "Pick it up!");



}
else if ((CheckInventory("mdipts")<arg4) && (!CheckInventory("MurdererKey")))
{
Print(s: "Not enough points!");
LocalAmbientSound("SDDNOPE", 127);
}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   CLOTHES
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /


Script "EGGCLOTH" (void)
{
CreateTranslation(11, random(0,255):random(0,255)=random(0,255):random(0,255), random(0,255):random(0,255)=random(0,255):random(0,255), random(0,255):random(0,255)=random(0,255):random(0,255));
Thing_SetTranslation(0, 11);
delay(35);
restart;
}




str clothname[8] = {"...hmm, don't have any uniform to dress in.",
	"swamp green uniform.",
	"desaturated scarlet uniform.",
	"dark blue uniform.",
	"brick red uniform.",
	"dirt white uniform.",
	"filth yellow uniform.",
	"desaturated uniform."};

str clothCode[8] = {"",
	"color 42692e",
	"color 855864",
	"color 281d86",
	"color b33b3b",
	"color e8e7e7",
	"color e8f095",
	"color 919191"};


SCRIPT "Cloth" (int arg3)
{
	if (CheckInventory("MurdererKey"))
	{
Print(s:"You are blood-colored mutilator. No need to change.");
LocalAmbientSound("SDDNOPE", 127);
}

else if (CheckInventory("EggClothOn"))
	{
Print(s:"You can't take off the rainbow outfit! What's going on?!");
LocalAmbientSound("SDDNOPE", 127);
}
else if ((!CheckInventory("MurdererKey")) && (!CheckInventory("EggClothOn")))
{
SetAmmoCapacity("ClothStatus", arg3-1000);
Print(s:"Found the ", s: clothname[arg3-1000], s:"\n\nPress \ci'CHANGE COLOURS' \cfbutton to dress up.");
ActivatorSound("SDCLOTH", 127);
delay(35*4);
}
}





//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   HIDING IN LOCKERS, DROpes, etc
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


script "S_Lockercrosser" (int arg3, int arg4)
{
If (CheckInventory("IsQuiet"))
{}else{
if ((arg3==0)|(arg4==0)){
ActivatorSound("SND_LOCKERR", 127);}
else if ((arg3 != 0)|(arg4 !=0))
{ if ((GetActorZ(0)>=(arg3<<16))&&(GetActorZ(0)<=(arg4<<16))){ActivatorSound("SND_LOCKERR", 127);} else {}}
}}


script "S_dropecrosser" (int arg3, int arg4)
{
If (CheckInventory("IsQuiet"))
{}else{
if ((arg3==0)|(arg4==0)){
ActivatorSound("SDCLOTH", 127);}
else if ((arg3 != 0)|(arg4 !=0))
{ if ((GetActorZ(0)>=(arg3<<16))&&(GetActorZ(0)<=(arg4<<16))){ActivatorSound("SDCLOTH", 127);} else {}}
}}



script "S_DOORJAM_A" (void)
{
ActivatorSound("LOCKJAM5", 48);
Print(s:"The lock is jammed. \n\n This door can't be opened.");
}


script "S_DOORJAM_B" (void)
{
ActivatorSound("LOCKJAM6", 48);
Print(s:"The lock is jammed. \n\n This door can't be opened.");
}

script "S_DOORJAM_C" (void)
{
ActivatorSound("LOCKJAM7", 48);
Print(s:"The lock is jammed. \n\n This door can't be opened.");
}

script "S_Windowcrosser" (void)
{
ActivatorSound("Glass/Break", 127);
}

script "S_NOAXE" (void)
{
Print(s:"Can't pull out! \n\n This axe went too deep into the wall.");
}

script "S_NOHEAVYAXE" (void)
{
Print(s:"Can't pull out. \n\n This axe is way too heavy!");
}

script "S_NOJSNKNIFE" (void)
{
Print(s:"This blade is completely dull. \n\n can't use it.");
}

script "S_NOlift" (void)
{
Print(s:"Lift doesn't work.");
ActivatorSound("Lift/Button", 128);
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   MAP ACCIDENT
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  place 'Actor hits' floor with arguments
int accidentTeleport;

script "VICTIMACCIDENT" (int arg3, int arg4, int arg5) //arg3 = Area 1, arg4 = Area 2, arg5 = Area 3 . It makes Mutilator to start over from the area he fell off.

{
	if (CheckInventory("MurdererKey"))
	{
	SetAmmoCapacity("mutiwait", 12);
	ACS_NamedExecute("MutilatorWait",0);
	Teleport(accidentTeleport, 0, 1);
	SetLineBlocking(arg3, BLOCK_NOTHING);
	SetLineBlocking(arg4, BLOCK_EVERYTHING);
	SetLineBlocking(arg5, BLOCK_EVERYTHING);
	SetLineTexture(arg3, SIDE_FRONT, TEXTURE_MIDDLE, "-");
	SetLineTexture(arg4, SIDE_FRONT, TEXTURE_MIDDLE, "ADEL_C02");
	SetLineTexture(arg5, SIDE_FRONT, TEXTURE_MIDDLE, "ADEL_C02");
	}
	else
	{
	DamageThing(250, MOD_CRUSH);
	}
	}
	
	
 Script "MinigamerFelt" (void)   
{
DamageThing(250, MOD_CRUSH);
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////   INTRO first phase
///////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





script "SwitchWeapon" (void) clientside
{
if (!Client_action()) { terminate;}
ConsoleCommand("slot 2");	//ConsoleCommand("weapnext");	
}







script "MiscSettings" ENTER clientside
{
if (MUTILATOR_MOD() > 0)
{
consolecommand("gl_texture_format 0");
}
}








script "MDI_UserStyle" (void) {}



Script "HeIsNotTKer" (void)
{
while(true)
{
TakeInventory("TKToken", 999); //he in not tker
delay(35);
}
}



Script "SecOutroTheme" (void){}

script "MDI_ENDSOUND" (void)
{
AmbientSound("SDMDIEND",127);
}


script "S_MDI_BEHINDYOU" (void) //clientside
{
ThrustThing(GetActorAngle(ActivatorTID())>>8, 4,0, ActivatorTID());
LocalAmbientSound(MutilatorType[2], 127);
SpawnspotForced("stunyou", ActivatorTID(), 5577, GetActorAngle(ActivatorTID())>>8);
delay(35);
SetActorState(5577, MutilatorType[4], TRUE);
ACS_NAMEDEXECUTEALWAYS("OKSPIN", 0);
}

script "OKSPIN" (void) clientside
{
while(CheckInventory("SpinCNTR") < 8) 
{
delay(1);
SetActorAngle (0, GetActorAngle (0) - -0.05);
GiveInventory("SpinCNTR", 1);//linkscnt0++;
}
while(CheckInventory("SpinCNTR") < 12) 
{
delay(1);
SetActorAngle (0, GetActorAngle (0) - -0.02);
GiveInventory("SpinCNTR", 1);
}
}





///////////////////////////////////////////
//////////////////////////////////////////
///////////////////////////////////////////
//////////////////////////////////////////
///////////////////////////////////////////
//////////////////////////////////////////
/////////////////////////////////MISC
//////////////////////////////////////////




script "TakeQuestTimer" (void)
{
for(int que = 0; que < 32; que++)
while(GetCVAR("MDISTATE") < 3)
{
TakeActorInventory(TID_START+que, "QuestTimer", 1);
delay(35);
}
}
//////////////////////////////////////////////////
//////////////////////////////////////////////////Admin Gift

script "AdminGift" (int arg3)
{
for(int lol = 0; lol < 32; lol++)
GiveActorInventory(TID_START+lol, GetCvarString("itemgive"),arg3);
}

script "AdminGiftDrop" (void)
{
for(int lol = 0; lol < 32; lol++)
SpawnSpotForced(GetCvarString("dropitemgive"), TID_START+lol, 0, 0);
}

script "AdminTakeInv" (void)
{
for(int lol = 0; lol < 32; lol++)
TakeActorInventory(TID_START+lol, GetCvarString("itemgive"),99);
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////BearTrap

script "S_BearTrap" (void)

{
GiveActorInventory(TID_START+gameinfo[2], "BeartrapNotify", 1);
SetPlayerProperty(0,  ON, PROP_TOTALLYFROZEN);
fadeto(64, 16, 16, 0.75, 1.0);
Print(s:"You were caught in a beartrap!");
DamageThing(random(7,15),MOD_CRUSH);
ACS_NamedExecute("WDI_DEATH_SFX", 0); //pain sound
delay(35);
SpawnSpotForced("BearTrapUsed", ActivatorTID(), 0, 0);
delay((35*(random(mdigame[13],mdigame[14])))-95);
fadeto(64, 16, 16, 0.0, 3.0);
fadeto(64, 16, 16, 0.0, 3.0);
SetPlayerProperty(0,  OFF, PROP_TOTALLYFROZEN);
ActivatorSound("SDBEARTP", 127);
//}
}

script "S_BearTrapNotify" (void)
{
Print(s:"Someone got caught in your beartrap!");
}

script "S_BearTrapExsposed" (void)
{
if (!CheckInventory("IsMutilator"))
{
If (GetActorProperty(ActivatorTid(), APROP_Speed)<= 0.2)
{
SetActorProperty(12992, APROP_Alpha, GetActorProperty(12992, APROP_Alpha) + 0.10);
}
}
}


script "S_BeartrapStealthNotify" (void)
{
PrintBold(s:"Mutilator has placed a stealth beartrap somewhere!\n\nWalk slowly to expose it.");
}



//SEASON
Script "SeasonEnd" (void)
{
SetCvar("SeasonOnHold", true);
for(int m = 0; m < 32; m++)
{GiveActorInventory(TID_START+m, "Fireworks", 20);}
delay(5);
SetMusic("KEROSENE");
while(true)

	{
	SetFont("BIGFONT");
	HudMessageBold(s:"Season ",i:GetCvar("WDIMDISeason"),s:" is over!" ; HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.8, 2.0, 1.0);
	SetFont("SMALLFONT");
	HudMessageBold(s:"Celebrate using fireworks! \n\nPlease report to admin to start next season." ; HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.9, 2.0, 1.0);
	delay(35);
	}
}


script "S_SNAKEBITE" (void)
{

	FadeTo(0, 100, 25, 0.5, 1.0);
DamageThing(random(7,15),MOD_CRUSH);
ActivatorSound("SDSNKBIT", 127);
delay(5);
SpawnSpotForced("SwampSnake", ActivatorTID(), 0, 0);
delay(35*2);
FadeTo(0, 100, 25, 0.0, 3.0);
}







script 999 (void) NET CLIENTSIDE
{
if (MUTILATOR_MOD() == 0)
{
colour = random(1,21);
if (colour == colour2) { restart; }
If (colour == 1) { ConsoleCommand("color FF0000"); Log(s:"\cgRed"); } //red
Else if (colour == 2) { ConsoleCommand("color 00FF00"); Log(s:"\cdGreen"); } //green
Else if (colour == 3) { ConsoleCommand("color 0000FF"); Log(s:"\cnBlue"); } //blue
Else if (colour == 4) { ConsoleCommand("color FFFF00"); Log(s:"\cfYellow"); } //yellow
Else if (colour == 5) { ConsoleCommand("color FFFFFF"); Log(s:"\ccWhite"); } //white
Else if (colour == 6) { ConsoleCommand("color 000000"); Log(s:"\cmBlack"); } //black
Else if (colour == 7) { ConsoleCommand("color BEBEBE"); Log(s:"\cuLight gray"); } //light grey
Else if (colour == 8) { ConsoleCommand("color 7E7E7E"); Log(s:"\cuGray"); } //grey
Else if (colour == 9) { ConsoleCommand("color 2E2E2E"); Log(s:"\cmDark grey"); } //dark grey
Else if (colour == 10) { ConsoleCommand("color 00FFFF"); Log(s:"\cvCyan"); } //cyan
Else if (colour == 11) { ConsoleCommand("color FF00FF"); Log(s:"\caPink"); } //pink
Else if (colour == 12) { ConsoleCommand("color 7F00FF"); Log(s:"\ctPurple"); } //purple
Else if (colour == 13) { ConsoleCommand("color FF7400"); Log(s:"\ciOrange"); } //orange
Else if (colour == 14) { ConsoleCommand("color A55A2A"); Log(s:"\ceBrown"); } //brown
Else if (colour == 15) { ConsoleCommand("color 640000"); Log(s:"\crDark red"); } //dark red
Else if (colour == 16) { ConsoleCommand("color 006400"); Log(s:"\cqDark green"); } //dark green
Else if (colour == 17) { ConsoleCommand("color 000064"); Log(s:"\chDark blue"); } //dark blue
Else if (colour == 18) { ConsoleCommand("color FF007F"); Log(s:"\caMagenta"); } //magenta
Else if (colour == 19) { ConsoleCommand("color C57A4A"); Log(s:"\ceLight brown"); } //light brown
Else if (colour == 20) { ConsoleCommand("color 00C07F"); Log(s:"\cvTurqoise"); } //turqoise
Else if (colour == 21) { ConsoleCommand("color 652A00"); Log(s:"\csDark brown"); } //dark brown
colour2 = colour;
delay(40);
}
else 
{
str SetClothColour = StrParam(s: ClothCode[GetAmmoCapacity("ClothStatus")]); //CLOTH REGULATIONS
	if (CheckInventory("MurdererKey"))
	{
Print(s:"You are blood-colored mutilator. No need to change.");
LocalAmbientSound("SDDNOPE", 127);
}
else if ((!CheckInventory("MurdererKey")) && (GetAmmoCapacity("ClothStatus")<=0))
	{
Print(s:"You have to find some cloths to change first");
LocalAmbientSound("SDDNOPE", 127);
}
else if ((!CheckInventory("MurdererKey")) && (GetAmmoCapacity("ClothStatus")>0))
	{
	ConsoleCommand(SetClothColour);
Print(s:"Changed colours to ", s: ClothName[GetAmmoCapacity("ClothStatus")]);
ActivatorSound("SDCLOTH", 127);
}
Delay(40);
}
}





/////////////////////////////////MDI03


Script "S_DrugKit" (void) 
{
if (Mutilator_mod() > 0)
  {
  GiveInventory("ClientDrugKitUsed", 1);
  }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   MDI CLIENT
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //// /// // /







Script "InvCloakMessage"  (int password, int type) NET 
{if (MDI_PassMatch(password))     
{
if(type == 99) PrintBold(n:0, s: " has found an Invisibility Cloak!");
if(type == 50) PrintBold(n:0, s: " has torn invisibility cloak, so victims wouldn't find it");
}
}



Script "InvCloakEffect"  (int password, int Visibility) NET 
{if ((MDI_PassMatch(password)) && CheckInventory("InvInvCloak"))    
{
SetActorProperty(0, APROP_RENDERSTYLE, STYLE_Translucent);
SetActorProperty(0, APROP_Alpha, (Visibility << 8));
}
}








Script "FLASHLIGHT_ON"  (int password) NET {if (MDI_PassMatch(password))     SetCVAR(StrParam(s:"PSPECIAL", i:PlayerNumber()), 1);}
Script "FLASHLIGHT_OFF"  (int password) NET {if (MDI_PassMatch(password))     SetCVAR(StrParam(s:"PSPECIAL", i:PlayerNumber()), 0);}

Script "VICTIM_SNEAK"  (int password) NET 
{
if (MDI_PassMatch(password))
{     
GiveInventory( "IsSneaking",  1);
TakeInventory("IsRunning", 99); 
SetActorProperty(TID_START+PlayerNumber(), APROP_Speed, GetCvar("mdispeed1"));
}
} //1



Script "MUTILATOR_WALK"    (int password) NET {if (MDI_PassMatch(password))        SetActorProperty(TID_START+PlayerNumber(), APROP_Speed, GetCvar("mdispeed2") + GetCvar("mdispecial5"));} //2
Script "VICTIM_WALK"    (int password) NET 
{
if (MDI_PassMatch(password)) 
{   
TakeInventory("IsSneaking", 99);
TakeInventory("IsRunning", 99); 
SetActorProperty(TID_START+PlayerNumber(), APROP_Speed, GetCvar("mdispeed3"));
}
}//3


Script "VICTIM_RUN"   (int password) NET 
{
if (MDI_PassMatch(password)) 
{ 
GiveInventory( "IsRunning",  1); 
TakeInventory("IsSneaking", 99);   
SetActorProperty(TID_START+PlayerNumber(), APROP_Speed, GetCvar("mdispeed4"));
}
} //4




script "LookAtVictims" (int password) NET 
{
if (MDI_PassMatch(password)) 
{
LineAttack(0,GetActorAngle(ActivatorTID()), GetActorPitch( ActivatorTID()), 0, "ChasePuff", "None", (Int2Fix(chasedist)), FHF_NORANDOMPUFFZ| FHF_NOIMPACTDECAL, 0);
}
}

Script "DEFAULT_SPEED"    (int password) NET {if (MDI_PassMatch(password))       SetActorProperty(TID_START+PlayerNumber(), APROP_Speed, GetCvar("mdispeed5"));}//5

Script "ClientTakeDrugKit"    (int password) NET {if (MDI_PassMatch(password))       TakeInventory("ClientDrugKitUsed", 99);}//5





Script "JasonChainsaw"  (int password) NET {if (MDI_PassMatch(password))
{
int counter = 17;
while(counter > 0)
{
LineAttack(TID_START+PlayerNumber(), GetActorAngle(ActivatorTID()), GetActorPitch( ActivatorTID()), 3, "FMBulletPuff2", "None", 32.0, FHF_NORANDOMPUFFZ| FHF_NOIMPACTDECAL, 0); TakeInventory("Gasoline", 4);
LineAttack(TID_START+PlayerNumber(), GetActorAngle(ActivatorTID()), GetActorPitch( ActivatorTID()), 1, "MutilatorPuff", "None", 32.0, FHF_NORANDOMPUFFZ| FHF_NOIMPACTDECAL, 0); TakeInventory("Gasoline", 3);
counter--;
delay(2);
}
}
}


Script "MutilatorWepIDLsfx"  (int password) NET {if (MDI_PassMatch(password))
{
PlaySound(TID_START+PlayerNumber(), MutilatorType[3], 6 , 5.0,  false, ATTN_NORM, 0 );
}
}





Script "MALE_EXHAUST"  (int password) NET {if (MDI_PassMatch(password))       ActivatorSound("SNDBRE", 127);} 
Script "FEMALE_EXHAUST"  (int password) NET {if (MDI_PassMatch(password))       ActivatorSound("SNDBREF", 127);} 
Script "MDI_WaterSFX"  (int password) NET {if (MDI_PassMatch(password))       ActivatorSound("STEPWAS", 127);} 


Script "MutiVolunteer"  (int password) NET 
{if (MDI_PassMatch(password))
{

	    if (NumWantedMuti >= 7)   
		  {
		  HudMessage(s: "Enough players wanted to be the Mutilator, sorry"; HUDMSG_FADEOUT, 1724, CR_GREY, 0.5, 0.02, 3.0, 1.0 );
		  }
		else
		  {
	 Log(n:0, s:" wants to be Mutilator");
	 endcam[0] = 1; //give a couple of bonus pts for volunteer
	 WannaBeMutilator[NumWantedMuti] = PlayerNumber();
	 NumWantedMuti++;
	      }
}
}




Script "MDI_SetBChaseOne"  (int password) NET    {if (MDI_PassMatch(password)) {SetAmmoCapacity("BeingChased", 1);}}
Script "MDI_StopChase"  (int password) NET    {if (MDI_PassMatch(password)) {SetAmmoCapacity("BeingChased", 0);}}
Script "S_StartChase"  (void) {SetAmmoCapacity("BeingChased", 5);}





Script "MDI_WantSkipIntro"  (int password) NET    {if (MDI_PassMatch(password)) {mdigame[12] += 1;}}

Script "MDI_IsNightmarer"  (int password) NET 
{if (MDI_PassMatch(password))
{
	  GiveInventory("truNMARER", 1);
	  Log(s:StrParam(n:0), s:" has chosen Nightmare mode.");
      SetFont("confont");
      HudMessageBold(n:0; HUDMSG_FADEOUT, 0,CR_UNTRANSLATED, 0.75, 0.93, 0.5, 0.5 );
}
}














script "MDI_RESET" OPEN
{
SetCVAR("WDIMDIspecial1", 0);
SetCVAR("WDIMDIspecial2", 0);
SetCVAR("WDIMDIspecial3", 0);
SetCVAR("WDIMDIspecial4", 0);
SetCVAR("WDIMDIspecial5", 0);
SetCVAR("WDIMDIspecial6", 0);
SetCVAR("mdispecial1", 0);
SetCVAR("mdispecial2", 0);
SetCVAR("mdispecial3", 0); //take sstamina away
//SetCVAR("mdispecial4", 0);
SetCVAR("mdispecial5", 0.0);
if(MDIGlobal[8] > 0) MDIGlobal[8]--;


	
{
if (MUTILATOR_MOD() > 0) //mdi map
{
ResetInventory(); //precaut!on
resetinventoryMDI(); //precaut!on
SetCVAR("MDISTATE", 0);
consolecommand("sv_chasecam 0");

int counterb;
while(counterb < 32)
  {
  SetCvar(strparam(s:"PSPECIAL", i:counterb), 0);
  counterb++;
  }




}
else consolecommand("sv_chasecam 1");
}






//Changing Speed Regulation based on the maps
if (MUTILATOR_MOD() == 1)//normal mdi map
{
SetCVAR("mdispeed1", 0.2); //victim sneak speed
SetCVAR("mdispeed2", 0.5); //mutilator walk speed
}
else if (MUTILATOR_MOD() == 2) //mdi movie
{
SetCVAR("mdispeed1", 0.175); //victim sneak speed
SetCVAR("mdispeed2", 0.26); //mutilator walk speed
}


	
int counter = 13;
if ((MDIGlobal[0] == 0) && (MUTILATOR_MOD() > 0) && (IsNetworkGame()) && (GetCVAR("RespTimeGhost") != 13333))
    {
	While(counter > 0)
	{
	SetHUDSize(0,0, 0);
	SetFont("BIGFONT");
    HudMessageBold(s:"Skipping To WhoDunIt in...", i:counter ; HUDMSG_FADEOUT, -1111,CR_RED, 0.5, 0.5, 1.0, 1.0);
	delay(35);
	counter--;
	}
    ResetInventory(); //precaut!on
    resetinventoryMDI(); //precaut!on
	Delay(35);
	Wdi_Setinvulnerable(FALSE);
	//SetPlayerProperty(1,0,PROP_INVULNERABILITY);  //experiment
	SetPlayerProperty(1,0,PROP_FROZEN); //experiment
	SetPlayerProperty(1,0,PROP_TOTALLYFROZEN);  //experiment
	SetPlayerProperty(1,0,PROP_FLY); //experiment
	delay(1);
	Exit_Normal(0);
	Delay(1);
	terminate;
	}	
	
while(MUTILATOR_MOD() == 0) // if WhoDunIt
{
//PASSWORD
setcvar("mdispecial2", getcvar("mdispecial1"));
SetCVAR("mdispecial1", random(1,9999));

setcvar("mdispecial7", getcvar("mdispecial6"));
SetCVAR("mdispecial6", random(1,9999));
delay(140);
}





while(MUTILATOR_MOD() > 0) // if Mutilator
{
//PASSWORD
setcvar("mdispecial2", getcvar("mdispecial1"));
SetCVAR("mdispecial1", random(1,9999));

setcvar("mdispecial7", getcvar("mdispecial6"));
SetCVAR("mdispecial6", random(1,9999));
//GAMEPLAY


//Dynamic Speed changing
if (MUTILATOR_MOD() == 2)
{
if (playercount() <= 2) {SetCVAR("mdispecial3", 12); SetCVAR("mdispecial5", 0.04);}
else if ((playercount() > 2) && (playercount() <= 5)) {SetCVAR("mdispecial3", 16); SetCVAR("mdispecial5", 0.02);}
else if ((playercount() > 5) && (playercount() <= 10)) {SetCVAR("mdispecial3", 18); SetCVAR("mdispecial5", 0.01);}
else if (playercount() > 10) {SetCVAR("mdispecial3", 20); SetCVAR("mdispecial5", 0.0);}
}

if (MUTILATOR_MOD() == 1)
{
if (playercount() <= 2) {SetCVAR("mdispecial3", 8); SetCVAR("mdispecial5", 0.04);}
else if ((playercount() > 2) && (playercount() <= 5)) {SetCVAR("mdispecial3", 10); SetCVAR("mdispecial5", 0.02);}
else if ((playercount() > 5) && (playercount() <= 10)) {SetCVAR("mdispecial3", 12); SetCVAR("mdispecial5", 0.01);}
else if (playercount() > 10) {SetCVAR("mdispecial3", 14); SetCVAR("mdispecial5", 0.0);}
}
delay(70);
}
}







#libdefine RadarBaseX 960
#libdefine RadarBaseY 1220




script "MDI_ClientLogic" OPEN CLIENTSIDE
{
int ANGx;
int ANGY;
int buttonz;
int penalty;
int flashcooldown;
int SSTAMINA = 10000;
int MaxStamina = 10000;
bool flashlight = false;
int pendelay;
bool DrugUsed;
int MutiAmmo;
int MutiMaxAmmo = 1000;
int mitiatkdel;
int visibility = 256;
int VisibilityMax = 256;
str staminatype = "";
int ClientSpam;
bool volunteered = false;
int foundcloak;
int waterdelay;
bool ClientDied = false;
int beingchased;
bool chasestarted = false;
str StageIconn;
Str MusikIs = "";
bool Musik = false;
bool MusikDelay = 35;

int VisibiDelay;
// skip / nightmare
bool introskip = false;
bool nightmare = false;
bool sawnightmare = false;
//mutilator's weapon sound effect delay
int MutiWepIdlSFXdel;
int MutiWepIdlSFXdelMax = 10;
int lookatvictims = 30;
//
int password;
//
Int MyX = 0.0;
Int MyY = 0.0;
int MyAngle;
str AngleIMG;
int InQuest = 8 + (GetAmmoCapacity("StageStatus")/100)*3;
int ticdown = 35;

int ran;
str MDIadvice;
bool sawadvice;
//FLASHLIGHT icon
str flashcolor;
str FlashAdvice = "  button to turn ON/OFF your flashlight";
bool UsedFLonce;
//MDI03 QUEST
int MovStage;
bool MovQuesting;
int MovQuarter;
int MovArea;
int QuestX;
int QuestY;
int QuestMeter;
//Basic Advice
bool RunAdvice;
bool WalkAdvice;
//
if (MUTILATOR_MOD() == 0) terminate;
SetActivatorToPlayer(ConsolePlayerNumber());

if (MUTILATOR_MOD() == 1) staminatype = "ST";
if (MUTILATOR_MOD() == 2) staminatype = "EN";

// if (!Client_action()) { terminate;}
 
 
 while(PlayerIsSpectator(ConsolePlayerNumber()) == 0)
 {
 ANGx = GetActorX(0) + FixedMul(cos(GetActorAngle(0)), 64.0);
 ANGy = GetActorY(0) + FixedMul(sin(GetActorAngle(0)), 64.0);
 buttonz = GetPlayerInput(-1, INPUT_BUTTONS);
  
 //secure operation
   password = GetCvar("mdispecial1") * PlayerCount() - GetCvar("mdispecial6") ;  
   if (Playercount() > 2) consolecommand("developer 0");
  
 if (ClientSpam <= 0) {ConsoleCommand("slot 2"); ClientSpam = 50;}

if (sawadvice == false)
{
sawadvice = true;
ran = random(0,2); 
if (ran == 0) MDIadvice = "Turn Auto-fire off, or you'll be slowed down";
else if (ran == 1) MDIadvice = "Use flares to break the surveillance cameras,\n\n     shotgun trips or beartraps.";
else if (ran == 2) MDIadvice = "Save your stamina for emergency cases";
SetHUDSize(0, 0, 0);
SetFont("confont");
HudMessage(s: MDIadvice; HUDMSG_FADEOUT, 1777, CR_DARKGREEN, 0.5, 0.97, 3.0, 1.0 );
}







////////////////////////////////////////////  as Mutilator
 if((MUTILATOR_MOD() > 0) && (PlayerCount() > 1) &&  gameinfo[CLIENT_SAFETIMER] > wdimdiadd[17] && (GetCVAR("MDISTATE") < 1) && (volunteered == false))
 {
 SetHUDSize(0, 0, 0);
 SetFont("confont");
 HudMessage(s: "Press \cj", k: "+use", s:" + ", k: "+speed", s:" \ccif you want to be mutilator"; HUDMSG_FADEOUT, 1724, CR_GREY, 0.5, 0.02, 0.5, 1.0 );
     if (buttonz & BT_SPEED && buttonz & BT_USE) 
	 {
	 volunteered = true;
	 HudMessage(s: "Your wish is taken into account"; HUDMSG_FADEOUT, 1724, CR_GREY, 0.5, 0.02, 3.0, 1.0 );
	 NamedRequestScriptPuke("MutiVolunteer", password, 0, 0);
	 }
  }


 //INTRO" SKIP AND NIGHTMARE CHOOSE
 if ((GetCVAR("MDISTATE") == 1) && (MUTILATOR_MOD() == 1))
{
SetHUDSize(0, 0, 0);
SetFont("confont");
HudMessage(s: "Press \cg", k: "+showscores", s:" \crfor game rules"; HUDMSG_FADEOUT, 0, CR_DARKRED, 0.5, 0.05, 2.0, 1.0 );
if (introskip == false)
HudMessage(s: "Press \cg", k: "+attack", s:" \crto skip cutscene."; HUDMSG_FADEOUT, 0, CR_DARKRED, 0.5, 0.88, 2.0, 1.0 );
if ((nightmare == false) && (PlayerCount() > 5) && (!CheckInventory("MurdererKey"))) 
HudMessage(s:"Press \cg", k: "+altattack",s: " \crto toggle Nightmare difficulty."; HUDMSG_FADEOUT, 0, CR_DARKRED, 0.5, 0.94, 2.0, 1.0 ); 



   if ((buttonz & BT_ATTACK) && (introskip == false)) 
	 {
      introskip = true;
	  NamedRequestScriptPuke("MDI_WantSkipIntro", password, 0, 0);
	 } 
	if ((buttonz & BT_ALTATTACK) && (PlayerCount() > 5) && (nightmare == false) && (!CheckInventory("MurdererKey"))) 
	 {
      nightmare = true;
      NamedRequestScriptPuke("MDI_IsNightmarer", password, 0, 0);
	 }
}




// NIGHTMARE message
if (CheckInventory("truNMARER") && (sawnightmare == false))
{
      LocalAmbientSound("YZLAUGHA", 127);
      SetHUDSize(640, 480, 0);
      SetFont("M_NMARE");
      HudMessage(s:"A"; HUDMSG_FADEOUT, 0,CR_DARKRED, 320.0, 240.0, 5.0, 2.0 );
	  sawnightmare = true;
}
  
// NIGHTMARE effect  
 if (CheckInventory("truNMARER"))
{
StopSound(TID_START+gameinfo[2], 7);
StopSound(TID_START+gameinfo[2], 6);
StopSound(TID_START+gameinfo[2], 5);
StopSound(TID_START+gameinfo[2], 4);
StopSound(TID_START+gameinfo[2], 3);
StopSound(TID_START+gameinfo[2], 2);
StopSound(TID_START+gameinfo[2], 1);
StopSound(TID_START+gameinfo[2], 0);
}


//Picked up Invisibility Cloak
If(CheckInventory("InvInvCloak") && (foundcloak != 2))
{
   foundcloak = 1;
   if(!CheckInventory("MurdererKey"))    NamedRequestScriptPuke("InvCloakMessage", password, 99, 0); 
 else                                    NamedRequestScriptPuke("InvCloakMessage", password, 50, 0); 
   foundcloak = 2;
}




If ((foundcloak == 2) && CheckInventory("InvInvCloak"))
{
SetHUDSize(0, 0, 0);
setfont("M_VISIBL");
HudMessage(s:"A"; HUDMSG_PLAIN, 3475, CR_RED, 0.95, 0.1, 0.1);
setfont("confont");
HudMessage(s:"\n\n\n   ", d: (FixedDiv(Int2Fix(Visibility), Int2Fix(VisibilityMax))* 100) >> 16 , s:"%"; HUDMSG_PLAIN, 3474, CR_RED, 0.955, 0.1, 3.0);
 
if(VisibiDelay <= 0)
{
VisibiDelay = 10;
NamedRequestScriptPuke("InvCloakEffect", password, Visibility, 0);
}
VisibiDelay--;
}








 if (GetCVAR("MDISTATE") == 2)
   {
    consolecommand("gl_fogmode 1");
    if (checkinventory("IsVictim"))   /////////////////////////////////////////// VICTIMS
	{
	
    if (MUTILATOR_MOD() == 1)
	  {
	  //QUEST ICON
	  StageIconn = StrParam(s: "ICNM", d: GetAmmoCapacity("StageIcon"));
      HudMessageOnActor((GetAmmoCapacity("AreaTarget") + GetAmmoCapacity("StageStatus") + GetAmmoCapacity ("PersonaLuck")), FixedDiv(GetAmmoCapacity("stagerange"),GetAmmoCapacity("LessRange")),StageIconn,"", 644); 

	  }

     //Run/walk advices
	 
	 if(RunAdvice == false) 
	       {
		   SetHUDSize(0, 0, 0);
		   setfont("confont");
           HudMessage(s:"Hold ",  k:"+attack", s:" to run"; HUDMSG_FADEOUT, 0, CR_GREY, 0.95, 0.5, 0.1, 1.0);
		   }
	if(WalkAdvice == false) 
	       {
		   SetHUDSize(0, 0, 0);
		   setfont("confont");
           HudMessage(s:"Hold ",  k:"+altattack", s:" to sneak"; HUDMSG_FADEOUT, 0, CR_GREY, 0.95, 0.55, 0.1, 1.0);
		   }
/////////////////////////////////////////// 
/////////////////////////////////////////// 
/////////////////////////////////////////// Chase Music
/////////////////////////////////////////// 

If (!CheckInventory("truNMARER"))  //if not in nightmare mode
{



     if (GetAmmoCapacity("BeingChased") > 1)   //Mutilator just noticed player
     {
	 beingchased = 35*GetCvar("MDIchasetime");
	 NamedRequestScriptPuke("MDI_SetBChaseOne", password, 0, 0);
	 }

else if (GetAmmoCapacity("BeingChased") == 1)   
     {
	     if (chasestarted == false)
	         {
		     chasestarted = true;
		     LocalSetMusic(strparam(s:GetCvarString("MDIchasemusic"), i:random(1,4)));
		     }
	else if (chasestarted == true)
	         {
			 if (beingchased > 1)  beingchased--;
		else if	(beingchased == 1) NamedRequestScriptPuke("MDI_StopChase", password, 0, 0);
			 
			 
             
		     }
	 }

else if (GetAmmoCapacity("BeingChased") <= 0) 
       {
	   if (chasestarted == true) 
	       {
		    chasestarted = false;
			beingchased = 0;
		   	LocalAmbientSound("MZCHASE0", 127);
		    LocalSetMusic(strparam(s:GetCvarString("MDIroundmusic")));	
		   }
       }

}





if (MUTILATOR_MOD() == 2)
{
MyX = ((GetActorX(0)>>16)/16)*1.0;
MyY = ((GetActorY(0)>>16)/16)*(-1.0);
MyAngle = GetActorAngle(0) >> 8;
AngleIMG = strparam(s:"MDIPAA", i:MyAngle/10);
SetHUDSize(1920, 1440, 0);
SetFont("MDIRADAR");
HudMessage (s:"A"; HUDMSG_PLAIN, 1751, CR_GREY, Int2Fix(RadarBaseX),       Int2Fix(RadarBaseY),       1.5);
SetFont(AngleIMG);
HudMessage (s:"A"; HUDMSG_PLAIN, 1749, CR_GREY, Int2Fix(RadarBaseX) + MyX, Int2Fix(RadarBaseY) + MyY, 1.5);

if (MovStage < 10)
{
SetFont("MDIQUEST");
HudMessage (s:"A"; HUDMSG_PLAIN, 1750, CR_GREY, Int2Fix(QuestX), Int2Fix(QuestY), 1.5);
}

//debug
/*SetHUDSize(0, 0, 0);
SetFont("Confont");
HudMessage (
s:"MovQuesting: ",i:MovQuesting, s:"\n\n",
s:"MovStage: ",i:MovStage, s:"\n\n",  
s:"QuestMeter: ",i:QuestMeter, s:"\n\n",  
s:"MovQuarter: ",i:MovQuarter, s:"\n\n",  
s:"MovArea: ",i:MovArea, s:"\n\n", 
s:"InQuest: ",i:InQuest, s:"\n\n"; 
HUDMSG_PLAIN, 3456, CR_GREY, 0.5, 0.5, 1.5);
*/

//assigning quest
if ((MovQuesting == false) && (!CheckInventory("MurdererKey"))) 
{
MovQuesting = true;
MovStage++;
QuestMeter = random(1,25);
MovQuarter = SetMovQuarter(MovQuarter);

MovArea = SetMovArea(MovQuarter);
QuestX = SetMovQuestAreaX(MovArea);
QuestY = SetMovQuestAreaY(MovArea);
}



//Quest Area
if ((MovStage < 10) && (!CheckInventory("MurdererKey")))
{
if (CheckGoalDistance(160, MovArea, 13) == false) //If player is close to quest
InQuest = 8 + (MovStage*3);




if (CheckGoalDistance(32, MovArea, QuestMeter) == true) // If player is right at the Quest spot
  {
  MovQuesting = false;
  NamedRequestScriptPuke("MDI3QuestDone", password, MovStage, 0); 
  //InQuest = 8 + (MovStage*3);
  }
else if (CheckGoalDistance(160, MovArea, 13) == true) //If player is close to quest
   {
	if (InQuest > 0) {SetFont("BIGFONT"); SetHUDSize(800, 600, 0);HudMessage (s:"AUTO-SEARCH: ", i:InQuest; HUDMSG_FADEOUT, 1748, CR_GREY, 400.0, 64.0, 1.0, 0.5);}
	else {MovQuesting = false; NamedRequestScriptPuke("MDI3QuestDone", password, MovStage, 0); /*InQuest = 8 + (MovStage*3);*/}
   }



}
{
if (ticdown > 0) ticdown--;
else {ticdown = 35; InQuest--;}
}


//FLASHLIGHT ICON
{
     if (GetCVAR(StrParam(s:"PSPECIAL", i:ConsolePlayerNumber())) == 0) flashcolor = "c"; 
else if (GetCVAR(StrParam(s:"PSPECIAL", i:ConsolePlayerNumber())) == 1) {flashcolor = "k"; UsedFLonce = true;} 
}
if (UsedFLonce == true) FlashAdvice = "";
{
SetHUDSize(0, 0, 0);
setfont(strparam(s:"M_FLASH", i: GetCVAR(StrParam(s:"PSPECIAL", i:ConsolePlayerNumber()))));
HudMessage(s:"A"; HUDMSG_PLAIN, 3475, CR_YELLOW, 0.95, 0.1, 0.5);
setfont("confont");
HudMessage(s:"\c", s:flashcolor, k:"+use", s:FlashAdvice; HUDMSG_FADEOUT, 3474, CR_UNTRANSLATED, 0.95, 0.135, 0.1, 1.0);
}
}





////////////////////////////////////////////STAMINA
SetHUDSize(1920, 1440, 0);
SetFont(strparam(s:"MDI", s:staminatype, i:SSTAMINA/100));
HudMessage (s:"A"; HUDMSG_FADEOUT, 1747, CR_GREY, Int2Fix(RadarBaseX), Int2Fix(RadarBaseY), 0.1, 1.0);





//DRUGKIT
{
     if(CheckInventory("ClientDrugKitUsed") && (DrugUsed == false))  {DrugUsed = true; SSTAMINA = MaxStamina;}

else if(CheckInventory("ClientDrugKitUsed") && (DrugUsed == true))  NamedRequestScriptPuke("ClientTakeDrugKit", password, 0, 0);

else if (!CheckInventory("ClientDrugKitUsed") && (DrugUsed == true)) DrugUsed = false;

}


          if ((flashcooldown <= 0) && (MUTILATOR_MOD() == 2))
            {
         if ((buttonz & BT_USE) && (GetCvar(strparam(s:"PSPECIAL", i:ConsolePlayerNumber())) == 0) && (pendelay <=0)) {  NamedRequestScriptPuke("FLASHLIGHT_ON", password, 0, 0);      flashcooldown = 15; penalty = 30; LocalAmbientSound("SDFLSHON", 48); }
	else if ((buttonz & BT_USE) && (GetCvar(strparam(s:"PSPECIAL", i:ConsolePlayerNumber())) == 1))  { NamedRequestScriptPuke("FLASHLIGHT_OFF", password, 0, 0);     flashcooldown = 15; penalty = 35; LocalAmbientSound("SDFLSHOF", 48); }
            }


			 if (GetCvar(strparam(s:"PSPECIAL", i:ConsolePlayerNumber())) == 1)
			    {
				if (SSTAMINA < 5) { NamedRequestScriptPuke("FLASHLIGHT_OFF", password, 0, 0);  flashcooldown = 15;LocalAmbientSound("SDFLSHOF", 48); if (pendelay <= 0) pendelay = 150;}
	          else {
			        SSTAMINA -= (5 + penalty);
					if (penalty > 0) penalty--;
					}
			    }
			 else
			    {
				if (penalty > 0) penalty--;
			    }

		  if (flashcooldown > 0) flashcooldown--;

         if ((buttonz & BT_FORWARD)|(buttonz & BT_BACK)|(buttonz & BT_MOVELEFT)|(buttonz & BT_MOVERIGHT))

				  {

				  	if (buttonz & BT_ATTACK)
	                        {
							RunAdvice = true;
	                        if ((SSTAMINA >= 5) && (pendelay <=0)) 
							   {  SSTAMINA -= (15 + GetCvar("mdispecial3"));  
							     if(!CheckActorProperty(0, APROP_Speed, GetCvar("mdispeed4"))) NamedRequestScriptPuke("VICTIM_RUN", password, 0, 0); 
								 if (visibility < VisibilityMax)  visibility+= 18;  
									 
							   }

	                        else   { if(!CheckActorProperty(0, APROP_Speed, GetCvar("mdispeed3"))) NamedRequestScriptPuke("VICTIM_WALK", password, 0, 0);
							if (pendelay <= 0) pendelay = 150;
							if((checkinventory("victim1"))|(checkinventory("victim2")) && (pendelay == 150)) NamedRequestScriptPuke("MALE_EXHAUST", password, 0, 0); 
							if((checkinventory("victim3"))|(checkinventory("victim4")) && (pendelay == 150)) NamedRequestScriptPuke("FEMALE_EXHAUST", password, 0, 0); 

							if (SSTAMINA < MaxStamina) SSTAMINA += 3;}
							}

                    else if (buttonz & BT_ALTATTACK)

							{
							WalkAdvice = true;
							 if (visibility < VisibilityMax)  visibility+=random(3,4);
							 if (SSTAMINA < MaxStamina) SSTAMINA += 5;    if(!CheckActorProperty(0, APROP_Speed, GetCvar("mdispeed1"))) NamedRequestScriptPuke("VICTIM_SNEAK", password, 0, 0);
							}



					 else

						    {
										
                            if (visibility < VisibilityMax)  visibility+=8;
							if (GetCvar(strparam(s:"PSPECIAL", i:ConsolePlayerNumber())) == 1) SSTAMINA -= (5 + GetCvar("mdispecial3"));
							if(!CheckActorProperty(0, APROP_Speed, GetCvar("mdispeed3"))) NamedRequestScriptPuke("VICTIM_WALK", password, 0, 0);
							}

				  }

          else


				{
				if (visibility > 0)  visibility-=random(0,1);
				if (SSTAMINA < MaxStamina) SSTAMINA += 5; 
		        }

      }
	  ////////////////////////////////////////////    MUTILATOR
	  ///////////////////////////////////////////
	  //////////////////////////////////////////
	  /////////////////////////////////////////
	  else if (checkinventory("IsMutilator"))
	  {
/*	  								 if (checkInventory("IsInWater"))   
								     {
									 If (waterdelay <= 0) { NamedRequestScriptPuke("MDI_waterSFX", password, 0, 0); waterdelay = 10; }
									 else waterdelay --;
	                                 }     
*/    
	  //No Self Hear
      StopSound(0, 6);
      delay(1);	  
	  SetHUDSize(0, 0, 0);
      setfont(strparam(s:"MDITRAC", i: Musik));
      HudMessage(s:"A"; HUDMSG_PLAIN, 3475, CR_YELLOW, 0.95, 0.18, 0.5);
//      setfont("confont");
//      HudMessage(k:"+altattack"; HUDMSG_FADEOUT, 3474, CR_GREY, 0.95, 0.215, 0.1, 1.0);
	  if ((buttonz & BT_ALTATTACK) && (musikDelay <= 0))
	     {
		  MusikDelay = 35;
		  if (Musik == false)
		  {
		 Musik = true;
	     MusikIs = strparam(s:"MUTIMUS", i:random(1,4));
		 LocalSetMusic(MusikIs);
         SetHudSize(640, 480, FALSE);
         SetFont(MusikIs);
         Hudmessage(s:"A";HUDMSG_FADEINOUT,7142,CR_UNTRANSLATED, 320.0, 240.0, 4.0, 1.0, 1.0);
          }
		 else  {Musik = false; LocalSetMusic(strparam(s:GetCvarString("MDIroundmusic")));}
		  }
	  

	  if (musikDelay > 0) musikDelay--;
	  
	  if (lookatvictims > 0) lookatvictims--;
	  if (lookatvictims <=0) {lookatvictims = 15; NamedRequestScriptPuke("LookAtVictims", password, 0, 0);}
	  
	  ////////////////////////////////////////////    if map is mdi03
	  if ((MUTILATOR_MOD() == 2) &&(ClientSpam <= 0)) consolecommand("fov 110"); 


	  
	  
	  




	  
	   if ((buttonz & BT_FORWARD)|(buttonz & BT_BACK)|(buttonz & BT_MOVELEFT)|(buttonz & BT_MOVERIGHT)|(buttonz & BT_JUMP))  
	   
	   {
	   ////////////////////////////////////////////    making sound when mutilator is moving
	    if (MUTILATOR_MOD() == 1)
		{
	   	if (MutiWepIdlSFXdel <= 0) {MutiWepIdlSFXdel = MutiWepIdlSFXdelMax; NamedRequestScriptPuke("MutilatorWepIDLsfx", password, 0, 0);}
		if (MutiWepIdlSFXdel > 0) MutiWepIdlSFXdel--; //dicreament  mutilator weapon sound effect delay
		}
       /////// ---

		
		
		
		
		
		
	  if (MUTILATOR_MOD() == 2) 
	  {		  

		
	 //Mutilator FLASHLIGHT pt1 
	  flashcooldown = 50;
	   if (GetCvar(strparam(s:"PSPECIAL", i:ConsolePlayerNumber())) != 2)
	       {
	       if(GetCvar(strparam(s:"PSPECIAL", i:ConsolePlayerNumber())) != 1)  NamedRequestScriptPuke("FLASHLIGHT_ON", password, 0, 0); 
           }
      }

     

		
		////////////////////////////////////////////    other Mutilator's stuff (for all)
		
		
		
        if(!CheckActorProperty(0, APROP_Speed, GetCvar("mdispeed2") + GetCvar("mdispecial5"))) NamedRequestScriptPuke("MUTILATOR_WALK", password, 0, 0);//isMutilator 0.5  
        }
	   
	   
	   //Mutilator FLASHLIGHT pt2 
	   if (flashcooldown <= 0)  
	        {
	        if (GetCvar(strparam(s:"PSPECIAL", i:ConsolePlayerNumber())) != 2)
	             {
			     if(GetCvar(strparam(s:"PSPECIAL", i:ConsolePlayerNumber())) != 0)   NamedRequestScriptPuke("FLASHLIGHT_OFF", password, 0, 0);  
			     }
	        }
	   if (flashcooldown > 0) flashcooldown--; 

	   }
	   
	 
	 
	 
	 
}	 
	 
	  ////////////////////////////////////////////
	  ///////////////////////////////////////////
	  //////////////////////////////////////////
	  /////////////////////////////////////////	 
	  ////////////////////////////////////////        FINAL PHASE
	  ///////////////////////////////////////
	  //////////////////////////////////////
	  /////////////////////////////////////
	  
	  
  else if (GetCVAR("MDISTATE") == 3)  //When a final phase
  {
   consolecommand("gl_fogmode 1");
   visibility = 256;
   if ((checkinventory("IsMutilator")) && (ClientSpam <= 0)) consolecommand("fov 90");
   
   ////////////////////////////////////////////    Set a normal speed for everyone
   if(!CheckActorProperty(0, APROP_Speed, GetCvar("mdispeed5"))) NamedRequestScriptPuke("DEFAULT_SPEED", password, 0, 0);
  }
  
  else if (GetCVAR("MDISTATE") == 4) terminate;	
	
if (CheckWeapon("Mutilator1")==true)
{
////////////////////////////////////////////CHAINSAW
SetHUDSize(1920, 1440, 0);
SetFont(strparam(s:"MDIST", i:MutiAmmo/10));
HudMessage (s:"A"; HUDMSG_FADEOUT, 1747, CR_GREY, Int2Fix(RadarBaseX), Int2Fix(RadarBaseY) + 180.0, 0.1, 1.0);

	
	  ////////////////////////////////////////////    Chainsaw Attack
	  if  (buttonz & BT_ATTACK)
		{
	    if ((mitiatkdel <= 0) && (MutiAmmo > 8*35))
		{
		mitiatkdel = 35; //delay for next poss. attacl
		MutiAmmo-=8*35;  //Take Mutilator's ammo
		NamedRequestScriptPuke("JasonChainsaw", password, 0, 0);
		}
		if (MutiAmmo < 8*35)
		{
		SetFont("MDICHARG");
        HudMessage (s:"A"; HUDMSG_PLAIN, 0, CR_UNTRANSLATED, Int2Fix(RadarBaseX), Int2Fix(RadarBaseY) + 180.0, 0.75);
		}
	    } /////// end FIRE input	of chainsaw
if (MutiAmmo < MutiMaxAmmo) MutiAmmo+=2;				
}		
if (mitiatkdel > 0) mitiatkdel--; //dicreament special mutilator weapon delay 
  
  
  
  
 ClientSpam--;
 if (pendelay > 0) pendelay--; 
 delay(1);
 }
 
 
 
 
 
 
 
 
 
 if ((PlayerIsSpectator(ConsolePlayerNumber()) == 2) && (ClientDied == false)) //Player died
    {
	ClientDied = true;
    LocalSetMusic(strparam(s:GetCvarString("MDIroundmusic")));
	//consolecommand(strparam(s:"changemus ", s:GetCvarString("MDIroundmusic")));
    fadeto(0,0,0,0.0,0.0);
	terminate;
	}
 
 if ((PlayerIsSpectator(ConsolePlayerNumber()) == 1) && (ClientDied == false)) //Player connected
   {
   ClientDied = true;
   NamedRequestScriptPuke("MDI_ShowVotes", 0, 0, 0);
   LocalSetMusic(strparam(s:GetCvarString("MDIroundmusic")));
   terminate;
   }
 
 
delay(35);
restart;
}













function int SetMovQuestAreaX(int num)
{
int rett;
switch(num)
{
case 1: rett = RadarBaseX - 70; break;  case 2: rett = RadarBaseX - 50; break;  case 3: rett = RadarBaseX - 30; break;  case 4: rett = RadarBaseX - 10; break;
case 5: rett = RadarBaseX + 10; break;  case 6: rett = RadarBaseX + 30; break;  case 7: rett = RadarBaseX + 50; break;  case 8: rett = RadarBaseX + 70; break;
case 9: rett = RadarBaseX - 70; break;  case 10: rett = RadarBaseX - 50; break; case 11: rett = RadarBaseX - 30; break; case 12: rett = RadarBaseX - 10; break;
case 13: rett = RadarBaseX + 10; break; case 14: rett = RadarBaseX + 30; break; case 15: rett = RadarBaseX + 50; break; case 16: rett = RadarBaseX + 70; break;

case 17: rett = RadarBaseX - 70; break; case 18: rett = RadarBaseX - 50; break; case 19: rett = RadarBaseX - 30; break; case 20: rett = RadarBaseX - 10; break; 
case 21: rett = RadarBaseX + 10; break; case 22: rett = RadarBaseX + 30; break; case 23: rett = RadarBaseX + 50; break; case 24: rett = RadarBaseX + 70; break;
case 25: rett = RadarBaseX - 70; break; case 26: rett = RadarBaseX - 50; break; case 27: rett = RadarBaseX - 30; break; case 28: rett = RadarBaseX - 10; break;
case 29: rett = RadarBaseX + 10; break; case 30: rett = RadarBaseX + 30; break; case 31: rett = RadarBaseX + 50; break; case 32: rett = RadarBaseX + 70; break;

case 33: rett = RadarBaseX - 70; break; case 34: rett = RadarBaseX - 50; break; case 35: rett = RadarBaseX - 30; break; case 36: rett = RadarBaseX - 10; break;
case 37: rett = RadarBaseX + 10; break; case 38: rett = RadarBaseX + 30; break; case 39: rett = RadarBaseX + 50; break; case 40: rett = RadarBaseX + 70; break;
case 41: rett = RadarBaseX - 70; break; case 42: rett = RadarBaseX - 50; break; case 43: rett = RadarBaseX - 30; break; case 44: rett = RadarBaseX - 10; break;
case 45: rett = RadarBaseX + 10; break; case 46: rett = RadarBaseX + 30; break; case 47: rett = RadarBaseX + 50; break; case 48: rett = RadarBaseX + 70; break;

case 49: rett = RadarBaseX - 70; break; case 50: rett = RadarBaseX - 50; break; case 51: rett = RadarBaseX - 30; break; case 52: rett = RadarBaseX - 10; break;
case 53: rett = RadarBaseX + 10; break; case 54: rett = RadarBaseX + 30; break; case 55: rett = RadarBaseX + 50; break; case 56: rett = RadarBaseX + 70; break;
case 57: rett = RadarBaseX - 70; break; case 58: rett = RadarBaseX - 50; break; case 59: rett = RadarBaseX - 30; break; case 60: rett = RadarBaseX - 10; break;
case 61: rett = RadarBaseX + 10; break; case 62: rett = RadarBaseX + 30; break; case 63: rett = RadarBaseX + 50; break; case 64: rett = RadarBaseX + 70; break;
}
return rett;
}






function int SetMovQuestAreaY(int num)
{
int rett;
switch(num)
{
case 1: rett = RadarBaseY - 70; break;  case 2: rett = RadarBaseY - 70; break;  case 3: rett = RadarBaseY - 70; break;  case 4: rett = RadarBaseY - 70; break;
case 5: rett = RadarBaseY - 70; break;  case 6: rett = RadarBaseY - 70; break;  case 7: rett = RadarBaseY - 70; break;  case 8: rett = RadarBaseY - 70; break;
case 9: rett = RadarBaseY - 50; break;  case 10: rett = RadarBaseY - 50; break; case 11: rett = RadarBaseY - 50; break; case 12: rett = RadarBaseY - 50; break;
case 13: rett = RadarBaseY - 50; break; case 14: rett = RadarBaseY - 50; break; case 15: rett = RadarBaseY - 50; break; case 16: rett = RadarBaseY - 50; break;

case 17: rett = RadarBaseY - 30; break; case 18: rett = RadarBaseY - 30; break; case 19: rett = RadarBaseY - 30; break; case 20: rett = RadarBaseY - 30; break; 
case 21: rett = RadarBaseY - 30; break; case 22: rett = RadarBaseY - 30; break; case 23: rett = RadarBaseY - 30; break; case 24: rett = RadarBaseY - 30; break;
case 25: rett = RadarBaseY - 10; break; case 26: rett = RadarBaseY - 10; break; case 27: rett = RadarBaseY - 10; break; case 28: rett = RadarBaseY - 10; break;
case 29: rett = RadarBaseY - 10; break; case 30: rett = RadarBaseY - 10; break; case 31: rett = RadarBaseY - 10; break; case 32: rett = RadarBaseY - 10; break;

case 33: rett = RadarBaseY + 10; break; case 34: rett = RadarBaseY + 10; break; case 35: rett = RadarBaseY + 10; break; case 36: rett = RadarBaseY + 10; break;
case 37: rett = RadarBaseY + 10; break; case 38: rett = RadarBaseY + 10; break; case 39: rett = RadarBaseY + 10; break; case 40: rett = RadarBaseY + 10; break;
case 41: rett = RadarBaseY + 30; break; case 42: rett = RadarBaseY + 30; break; case 43: rett = RadarBaseY + 30; break; case 44: rett = RadarBaseY + 30; break;
case 45: rett = RadarBaseY + 30; break; case 46: rett = RadarBaseY + 30; break; case 47: rett = RadarBaseY + 30; break; case 48: rett = RadarBaseY + 30; break;

case 49: rett = RadarBaseY + 50; break; case 50: rett = RadarBaseY + 50; break; case 51: rett = RadarBaseY + 50; break; case 52: rett = RadarBaseY + 50; break;
case 53: rett = RadarBaseY + 50; break; case 54: rett = RadarBaseY + 50; break; case 55: rett = RadarBaseY + 50; break; case 56: rett = RadarBaseY + 50; break;
case 57: rett = RadarBaseY + 70; break; case 58: rett = RadarBaseY + 70; break; case 59: rett = RadarBaseY + 70; break; case 60: rett = RadarBaseY + 70; break;
case 61: rett = RadarBaseY + 70; break; case 62: rett = RadarBaseY + 70; break; case 63: rett = RadarBaseY + 70; break; case 64: rett = RadarBaseY + 70; break;

}
return rett;
}





function int SetMovArea(int num)
{
int rett;
if(num == 1) Switch(random(1,16))
{
case 1: rett = 1; break;  case 2: rett = 2; break;  case 3: rett = 3; break;  case 4: rett = 4; break;
case 5: rett = 9; break;  case 6: rett = 10; break;  case 7: rett = 11; break;  case 8: rett = 12; break;
case 9: rett = 17; break;  case 10: rett = 18; break; case 11: rett = 19; break; case 12: rett = 20; break;
case 13: rett = 25; break; case 14: rett = 26; break; case 15: rett = 27; break; case 16: rett = 28; break;
}

else if(num == 2) Switch(random(17,32))
{
case 17: rett = 5; break; case 18: rett = 6; break; case 19: rett = 7; break; case 20: rett = 8; break; 
case 21: rett = 13; break; case 22: rett = 14; break; case 23: rett = 15; break; case 24: rett = 16; break;
case 25: rett = 21; break; case 26: rett = 22; break; case 27: rett = 23; break; case 28: rett = 24; break;
case 29: rett = 29; break; case 30: rett = 30; break; case 31: rett = 31; break; case 32: rett = 32; break;
}

else if(num == 3) Switch(random(33,48))
{
case 33: rett = 33; break; case 34: rett = 34; break; case 35: rett = 35; break; case 36: rett = 36; break;
case 37: rett = 41; break; case 38: rett = 42; break; case 39: rett = 43; break; case 40: rett = 44; break;
case 41: rett = 49; break; case 42: rett = 50; break; case 43: rett = 51; break; case 44: rett = 52; break;
case 45: rett = 57; break; case 46: rett = 58; break; case 47: rett = 59; break; case 48: rett = 60; break;
}

else if(num == 4) Switch(random(49,64))
{
case 49: rett = 37; break; case 50: rett = 38; break; case 51: rett = 39; break; case 52: rett = 40; break;
case 53: rett = 45; break; case 54: rett = 46; break; case 55: rett = 47; break; case 56: rett = 48; break;
case 57: rett = 53; break; case 58: rett = 54; break; case 59: rett = 55; break; case 60: rett = 56; break;
case 61: rett = 61; break; case 62: rett = 62; break; case 63: rett = 63; break; case 64: rett = 64; break;
}
return rett;
}



function int SetMovQuarter(int num)
{
int rett;
int ran;
     if (num == 0) {rett = random(1,4);}
else if (num == 1) {rett = random(2,4);}
else if (num == 2) {ran = random(0,1); if (ran == 0) rett = 1; else rett = random(3,4);}
else if (num == 3) {ran = random(0,1); if (ran == 0) rett = random(1,2); else rett = 4;}
else if (num == 4) {rett = random(1,3);}
return rett;
}

function bool CheckGoalDistance(int Radius, int AreaBlock, int QuestMeter)
{
if ((GetActorX(0)  >  GetActorX(AreaBlock*100 + QuestMeter) - Int2Fix(Radius)) &&  (GetActorX(0)  <  GetActorX(AreaBlock*100 + QuestMeter) + Int2Fix(Radius))
 && (GetActorY(0)  >  GetActorY(AreaBlock*100 + QuestMeter) - Int2Fix(Radius)) &&  (GetActorY(0)  <  GetActorY(AreaBlock*100 + QuestMeter) + Int2Fix(Radius)))

return true;
return false;
}




function int ShowQuestAreaWhenNearby(int tid, int range)
{
	int dist, ang, vang, pitch, xx, yy, rett ;

	xx = GetActorX(tid) - GetActorX(0);
	yy = GetActorY(tid) - GetActorY(0);

	vang = VectorAngle(xx,yy);
	ang = (vang - GetActorAngle(0) + 1.0) % 1.0;

	if(((vang+0.125)%0.5) > 0.25) dist = FixedDiv(yy, Sin(vang));
	else dist = FixedDiv(xx, Cos(vang));

	if (/*(ang < 0.2 || ang > 0.8) && */dist < range)
	{
    rett = 1;

	}
	else  rett = 0;

return rett;
}










script "MDI3QuestDone" (int password, int stagenum) NET
{
if (MDI_PassMatch(password)) 
 {
 int NMAREpts;
/*   {
   if (CheckInventory("QuestTimer")>40) {SetAmmoCapacity("PTSchance", 3);}
    else if ((CheckInventory("QuestTimer")>20) && (CheckInventory("QuestTimer")<41)) {SetAmmoCapacity("PTSchance", 2);}
    else if ((CheckInventory("QuestTimer")>0) && (CheckInventory("QuestTimer")<21)) {SetAmmoCapacity("PTSchance", 1);}
    else if (CheckInventory("QuestTimer")==0) {SetAmmoCapacity("PTSchance", 0);}
   }*/
// if (CheckInventory("truNMARER")) NMAREpts = 4;
int ran;

 if ((CheckInventory("mdipts")>=80) && (mdigame[15] ==2))
 {mdigame[15] =3; GiveActorInventory(TID_START+gameinfo[2], "UndeadCome", 1);  GiveActorInventory(TID_START+gameinfo[2], "TripShotgun", 1);  GiveActorInventory(TID_START+gameinfo[2], "MDIpulse", 1); GiveActorInventory(TID_START+gameinfo[2], "MutilatorGotItem", 1); } //and then zombie ressurect give
  if ((CheckInventory("mdipts")>=60) && (mdigame[15] ==1))
 {mdigame[15] =2; GiveActorInventory(TID_START+gameinfo[2], "MDIpulse", 1);  GiveActorInventory(TID_START+gameinfo[2], "LatentFlashlight", 1);GiveActorInventory(TID_START+gameinfo[2], "MutilatorGotItem", 1);} //second tripgive
 if ((CheckInventory("mdipts")>=30) && (mdigame[15] ==0))
 {mdigame[15] =1; GiveActorInventory(TID_START+gameinfo[2], "MDIpulse", 1);  GiveActorInventory(TID_START+gameinfo[2], "Beartrap", 1);GiveActorInventory(TID_START+gameinfo[2], "MutilatorGotItem", 1);} //first tripgive

  SetAmmoCapacity("mdiptsBONUS", getAmmoCapacity("mdiptsBONUS") + 2);
  //GiveInventory("mdipts", mdigame[2] + getAmmoCapacity("mdiptsBONUS") + NMAREpts + GetAmmoCapacity("PTSchance"));
  GiveInventory("mdipts", 10 + random(0,2));//mdigame[2] + 7);
  //GiveInventory("QuestTimer",60);
  Print(s: Goalcongrats[random(0,2)]);
  LocalAmbientSound(MPassedSFX[stagenum],127);
  LocalAmbientSound("Game/CountStart",127);
  //delay(5);
  if((stagenum == 2)|(stagenum == 4)|(stagenum == 6)|(stagenum == 8))
  SpawnSpotForced(GoalBonus[random(1,9)], ActivatorTID(), 0, 0);
  SetAmmoCapacity("StageStatus", getAmmoCapacity("StageStatus") + 100);
  //if (getAmmoCapacity("StageStatus")< 1000)
  //ACS_NamedExecuteAlways("S_SetMission",0);
}
}



function str StripColors(str input) //DrinkyBird + Mr.Satan
{
  str output = ""; bool isCol = false; bool isBracket = false;
  for (int i = 0; i < StrLen(input); i++)
  {
    int c = GetChar(input, i);
    if (GetChar(input, i) == '\\' && GetChar(input, i + 1) == 'c') { isCol = true; i++; }
    else if (c == 0x1C) { isCol = true; }
    else if (isCol)
    {
      if (c == '[') { isBracket = true; }
      else if (c == ']') { isBracket = false; }
      if (!isBracket) { isCol = false; }
    }
    else { output = StrParam(s: output, c: c); }
  }
  return output;
}






script "BanIfSpecGO" (int Ahead) //Ban if game winner has gone spec
{
if (MDIGlobal[7] == 1) terminate;

str bantime = 10;// + (MDIGlobal[6]*5);
int mapnum =  GetLevelInfo(LEVELINFO_LEVELNUM);
str lastplayer = StripColors(strparam(n:gameinfo[2] + 1));

if (Ahead > 0) //if murderer spectates midgame
{
Printbold(s:strparam(s:lastplayer, s:" has been kicked for ragequit as a murderer (", i:bantime, s:" minutes). Please respect the other players."));
consolecommand(strparam(s:"Ban ", s:lastplayer, s:" ", i:bantime, s:"minute \"Ragequit as a Murderer\""));
//MDIGlobal[6]++;
 terminate;
}
while(Playercount() > 1) delay(1);



if(Playercount() == 1) //who's the last player is?
{

int counter;
while(counter < 32) 
   {
   if (ClassifyActor(TID_START + counter) & ACTOR_ALIVE) lastplayer = StripColors(strparam(n:counter + 1));
   counter++;
   }
}


while(Playercount() > 0) delay(1);


if (mapnum != GetLevelInfo(LEVELINFO_LEVELNUM)) terminate;

Printbold(s:strparam(s:lastplayer, s:" has been kicked (", i:bantime, s:" minutes), because he quit the game at scoreboard screen. \n\nIt causes map restart or game crash. Please respect the other players."));
consolecommand(strparam(s:"Ban ", s:lastplayer, s:" ", i:bantime, s:"minute \"Please wait till the map properly end next time\""));
//MDIGlobal[6]++;
terminate;
}






script "TestFeature" (int IsOn)
{
MDIGlobal[7] = IsOn;
}








